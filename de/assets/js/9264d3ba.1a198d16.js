(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[9723],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return l},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||c;return t?n.createElement(g,a(a({ref:r},l),{},{components:t})):n.createElement(g,a({ref:r},l))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=u;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<c;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7764:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return i},default:function(){return l}});var n=t(2122),o=t(9756),c=(t(7294),t(3905)),a={sidebar_position:93},s={unversionedId:"core/developers/pac-protocol-core/client-commands/decodescript",id:"core/developers/pac-protocol-core/client-commands/decodescript",isDocsHomePage:!1,title:"decodescript",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/decodescript.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/decodescript",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/decodescript",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/decodescript.mdx",version:"current",sidebarPosition:93,frontMatter:{sidebar_position:93},sidebar:"coreSidebar",previous:{title:"decoderawtransaction",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/decoderawtransaction"},next:{title:"fundrawtransaction",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/fundrawtransaction"}},i=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>hexstring</code>",id:"hexstring",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],p={toc:i};function l(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,c.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"command"},"Command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli decodescript "hexstring"\n')),(0,c.kt)("p",null,"Decode a hex-encoded script."),(0,c.kt)("h2",{id:"arguments"},"Arguments"),(0,c.kt)("h3",{id:"hexstring"},(0,c.kt)("inlineCode",{parentName:"h3"},"hexstring")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"(string)")),(0,c.kt)("p",null,"the hex encoded script"),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli decodescript "hexstring"\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "decodescript", "params": ["hexstring"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,c.kt)("h2",{id:"result"},"Result"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "asm":"asm",   #(string) Script public key\n  "hex":"hex",   #(string) hex encoded public key\n  "type":"type", #(string) The output type\n  "reqSigs": n,    #(numeric) The required signatures\n  "addresses": [   #(json array of string)\n     "address"     #(string) pacglobal address\n     ,...\n  ],\n  "p2sh","address" #(string) address of P2SH script wrapping this redeem script #(not returned if the script is already a P2SH).\n}\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Running following help command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help decodescript\n")),(0,c.kt)("p",null,"Will produce following output:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'decodescript "hexstring"\n\nDecode a hex-encoded script.\n\nArguments:\n1. "hexstring"     (string) the hex encoded script\n\nResult:\n{\n  "asm":"asm",   (string) Script public key\n  "hex":"hex",   (string) hex encoded public key\n  "type":"type", (string) The output type\n  "reqSigs": n,    (numeric) The required signatures\n  "addresses": [   (json array of string)\n     "address"     (string) pacglobal address\n     ,...\n  ],\n  "p2sh","address" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\n}\n\nExamples:\n> pacglobal-cli decodescript "hexstring"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "decodescript", "params": ["hexstring"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}l.isMDXComponent=!0}}]);