(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[4781],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return i},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},i=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,g=u["".concat(c,".").concat(m)]||u[m]||p[m]||s;return t?n.createElement(g,o(o({ref:r},i),{},{components:t})):n.createElement(g,o({ref:r},i))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=u;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var l=2;l<s;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3245:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c},default:function(){return i}});var n=t(2122),a=t(9756),s=(t(7294),t(3905)),o={sidebar_position:112},d={unversionedId:"core/developers/pac-protocol-core/client-commands/addmultisigaddress",id:"core/developers/pac-protocol-core/client-commands/addmultisigaddress",isDocsHomePage:!1,title:"addmultisigaddress",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/addmultisigaddress.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/addmultisigaddress",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/addmultisigaddress",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/addmultisigaddress.mdx",version:"current",sidebarPosition:112,frontMatter:{sidebar_position:112},sidebar:"coreSidebar",previous:{title:"abortrescan",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/abortrescan"},next:{title:"backupwallet",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/backupwallet"}},c=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>nrequired</code> <span class='asterisk'>*</span>",id:"nrequired-",children:[]},{value:"<code>keys</code> <span class='asterisk'>*</span>",id:"keys-",children:[]},{value:"<code>account</code>",id:"account",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:c};function i(e){var r=e.components,t=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"command"},"Command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli addmultisigaddress nrequired ["key",...] ( "account" )\n')),(0,s.kt)("p",null,"Add a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\nEach key is a PACGlobal address or hex-encoded public key.\nIf 'account' is specified (DEPRECATED), assign address to that account."),(0,s.kt)("h2",{id:"arguments"},"Arguments"),(0,s.kt)("h3",{id:"nrequired-"},(0,s.kt)("inlineCode",{parentName:"h3"},"nrequired")," ",(0,s.kt)("span",{class:"asterisk"},"*")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(numeric, required)")),(0,s.kt)("p",null,"The number of required signatures out of the n keys or addresses."),(0,s.kt)("h3",{id:"keys-"},(0,s.kt)("inlineCode",{parentName:"h3"},"keys")," ",(0,s.kt)("span",{class:"asterisk"},"*")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(string, required)")),(0,s.kt)("p",null,"A json array of dash addresses or hex-encoded public keys"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n     "address"  (string) dash address or hex-encoded public key\n     ...,\n]\n')),(0,s.kt)("h3",{id:"account"},(0,s.kt)("inlineCode",{parentName:"h3"},"account")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(string, optional)")),(0,s.kt)("p",null,"DEPRECATED. An account to assign the addresses to."),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Add a multisig address from 2 addresses"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli addmultisigaddress 2 "[\\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\\",\\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\\"]"\n')),(0,s.kt)("p",null,"As json rpc call"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "addmultisigaddress", "params": [2, "[\\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\\",\\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\\"]"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,s.kt)("h2",{id:"result"},"Result"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'"address"         #(string) A dash address associated with the keys.\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Running following help command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help addmultisigaddress\n")),(0,s.kt)("p",null,"Will produce following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'addmultisigaddress nrequired ["key",...] ( "account" )\n\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\nEach key is a PACGlobal address or hex-encoded public key.\nIf \'account\' is specified (DEPRECATED), assign address to that account.\n\nArguments:\n1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\n2. "keys"         (string, required) A json array of dash addresses or hex-encoded public keys\n     [\n       "address"  (string) dash address or hex-encoded public key\n       ...,\n     ]\n3. "account"      (string, optional) DEPRECATED. An account to assign the addresses to.\n\nResult:\n"address"         (string) A dash address associated with the keys.\n\nExamples:\n\nAdd a multisig address from 2 addresses\n> pacglobal-cli addmultisigaddress 2 "[\\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\\",\\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\\"]"\n\nAs json rpc call\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "addmultisigaddress", "params": [2, "[\\"Xt4qk9uKvQYAonVGSZNXqxeDmtjaEWgfrS\\",\\"XoSoWQkpgLpppPoyyzbUFh1fq2RBvW6UK2\\"]"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}i.isMDXComponent=!0}}]);