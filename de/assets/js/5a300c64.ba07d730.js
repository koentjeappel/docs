(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[5540],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return h},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},h=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(b,i(i({ref:n},h),{},{components:t})):o.createElement(b,i({ref:n},h))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1720:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return h}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i={sidebar_position:11},c={unversionedId:"core/developers/pac-protocol-core/client-commands/getblock",id:"core/developers/pac-protocol-core/client-commands/getblock",isDocsHomePage:!1,title:"getblock",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getblock.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getblock",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblock",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getblock.mdx",version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"coreSidebar",previous:{title:"getbestchainlock",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getbestchainlock"},next:{title:"getblockchaininfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblockchaininfo"}},s=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>blockhash</code> <span class='asterisk'>*</span>",id:"blockhash-",children:[]},{value:"<code>verbosity</code>",id:"verbosity",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:s};function h(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getblock "blockhash" ( verbosity ) \n')),(0,a.kt)("p",null,"If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\nIf verbosity is 1, returns an Object with information about block ","<","hash",">",".\nIf verbosity is 2, returns an Object with information about block ","<","hash",">"," and information about each transaction. "),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"blockhash-"},(0,a.kt)("inlineCode",{parentName:"h3"},"blockhash")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The block hash"),(0,a.kt)("h3",{id:"verbosity"},(0,a.kt)("inlineCode",{parentName:"h3"},"verbosity")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(numeric, optional, default=1)")),(0,a.kt)("p",null,"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli getblock "00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Result #(for verbosity = 0):\n"data"             #(string) A string that is serialized, hex-encoded data for block \'hash\'.\n\nResult #(for verbose = 1):\n{\n  "hash" : "hash",     #(string) the block hash #(same as provided)\n  "confirmations" : n,   #(numeric) The number of confirmations, or -1 if the block is not on the main chain\n  "size" : n,            #(numeric) The block size\n  "height" : n,          #(numeric) The block height or index\n  "version" : n,         #(numeric) The block version\n  "versionHex" : "00000000", #(string) The block version formatted in hexadecimal\n  "merkleroot" : "xxxx", #(string) The merkle root\n  "tx" : [               #(array of string) The transaction ids\n     "transactionid"     #(string) The transaction id\n     ,...\n  ],\n  "cbTx" : {             #(json object) The coinbase special transaction \n     "version"           #(numeric) The coinbase special transaction version\n     "height"            #(numeric) The block height\n     "merkleRootMNList" : "xxxx", #(string) The merkle root of the masternode list\n     "merkleRootQuorums" : "xxxx", #(string) The merkle root of the quorum list\n  },\n  "time" : ttt,          #(numeric) The block time in seconds since epoch #(Jan 1 1970 GMT)\n  "mediantime" : ttt,    #(numeric) The median block time in seconds since epoch #(Jan 1 1970 GMT)\n  "nonce" : n,           #(numeric) The nonce\n  "bits" : "1d00ffff", #(string) The bits\n  "difficulty" : x.xxx,  #(numeric) The difficulty\n  "chainwork" : "xxxx",  #(string) Expected number of hashes required to produce the chain up to this block #(in hex)\n  "previousblockhash" : "hash",  #(string) The hash of the previous block\n  "nextblockhash" : "hash"       #(string) The hash of the next block\n}\n\nResult #(for verbosity = 2):\n{\n  ...,                     Same output as verbosity = 1.\n  "tx" : [               #(array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 "tx" result.\n         ,...\n  ],\n  ,...                     Same output as verbosity = 1.\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getblock\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'getblock "blockhash" ( verbosity ) \n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block \'hash\'.\nIf verbosity is 1, returns an Object with information about block <hash>.\nIf verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \n\nArguments:\n1. "blockhash"          (string, required) The block hash\n2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\n\nResult (for verbosity = 0):\n"data"             (string) A string that is serialized, hex-encoded data for block \'hash\'.\n\nResult (for verbose = 1):\n{\n  "hash" : "hash",     (string) the block hash (same as provided)\n  "confirmations" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  "size" : n,            (numeric) The block size\n  "height" : n,          (numeric) The block height or index\n  "version" : n,         (numeric) The block version\n  "versionHex" : "00000000", (string) The block version formatted in hexadecimal\n  "merkleroot" : "xxxx", (string) The merkle root\n  "tx" : [               (array of string) The transaction ids\n     "transactionid"     (string) The transaction id\n     ,...\n  ],\n  "cbTx" : {             (json object) The coinbase special transaction \n     "version"           (numeric) The coinbase special transaction version\n     "height"            (numeric) The block height\n     "merkleRootMNList" : "xxxx", (string) The merkle root of the masternode list\n     "merkleRootQuorums" : "xxxx", (string) The merkle root of the quorum list\n  },\n  "time" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  "mediantime" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n  "nonce" : n,           (numeric) The nonce\n  "bits" : "1d00ffff", (string) The bits\n  "difficulty" : x.xxx,  (numeric) The difficulty\n  "chainwork" : "xxxx",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\n  "previousblockhash" : "hash",  (string) The hash of the previous block\n  "nextblockhash" : "hash"       (string) The hash of the next block\n}\n\nResult (for verbosity = 2):\n{\n  ...,                     Same output as verbosity = 1.\n  "tx" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 "tx" result.\n         ,...\n  ],\n  ,...                     Same output as verbosity = 1.\n}\n\nExamples:\n> pacglobal-cli getblock "00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}h.isMDXComponent=!0}}]);