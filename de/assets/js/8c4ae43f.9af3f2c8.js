(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[2121],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,c(c({ref:t},u),{},{components:n})):a.createElement(h,c({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},807:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),c={sidebar_position:91},i={unversionedId:"core/developers/pac-protocol-core/client-commands/createrawtransaction",id:"core/developers/pac-protocol-core/client-commands/createrawtransaction",isDocsHomePage:!1,title:"createrawtransaction",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/createrawtransaction.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/createrawtransaction",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/createrawtransaction",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/createrawtransaction.mdx",version:"current",sidebarPosition:91,frontMatter:{sidebar_position:91},sidebar:"coreSidebar",previous:{title:"combinerawtransaction",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/combinerawtransaction"},next:{title:"decoderawtransaction",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/decoderawtransaction"}},s=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>inputs</code> <span class='asterisk'>*</span>",id:"inputs-",children:[]},{value:"<code>outputs</code> <span class='asterisk'>*</span>",id:"outputs-",children:[]},{value:"<code>locktime</code>",id:"locktime",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,"data":"hex",...} ( locktime )\n')),(0,o.kt)("p",null,"Create a transaction spending the given inputs and creating new outputs.\nOutputs can be addresses or data.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"inputs-"},(0,o.kt)("inlineCode",{parentName:"h3"},"inputs")," ",(0,o.kt)("span",{class:"asterisk"},"*")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(array, required)")),(0,o.kt)("p",null,"A json array of json objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n     {\n       "txid":"id",    (string, required) The transaction id\n       "vout":n,       (numeric, required) The output number\n       "sequence":n    (numeric, optional) The sequence number\n} \n     ,...\n]\n')),(0,o.kt)("h3",{id:"outputs-"},(0,o.kt)("inlineCode",{parentName:"h3"},"outputs")," ",(0,o.kt)("span",{class:"asterisk"},"*")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(object, required)")),(0,o.kt)("p",null,"a json object with outputs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "address": x.xxx,    (numeric or string, required) The key is the pacglobal address, the numeric value (can be string) is the PAC amount\n    "data": "hex"    (string, required) The key is "data", the value is hex encoded data\n    ,...\n}\n')),(0,o.kt)("h3",{id:"locktime"},(0,o.kt)("inlineCode",{parentName:"h3"},"locktime")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=0)")),(0,o.kt)("p",null,"Raw locktime. Non-0 value also locktime-activates inputs"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli createrawtransaction "[{\\"txid\\":\\"myid\\",\\"vout\\":0}]" "{\\"address\\":0.01}"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli createrawtransaction "[{\\"txid\\":\\"myid\\",\\"vout\\":0}]" "{\\"data\\":\\"00010203\\"}"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\\"txid\\":\\"myid\\",\\"vout\\":0}]", "{\\"address\\":0.01}"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\\"txid\\":\\"myid\\",\\"vout\\":0}]", "{\\"data\\":\\"00010203\\"}"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'"transaction"              #(string) hex string of the transaction\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help createrawtransaction\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,"data":"hex",...} ( locktime )\n\nCreate a transaction spending the given inputs and creating new outputs.\nOutputs can be addresses or data.\nReturns hex-encoded raw transaction.\nNote that the transaction\'s inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n\nArguments:\n1. "inputs"                (array, required) A json array of json objects\n     [\n       {\n         "txid":"id",    (string, required) The transaction id\n         "vout":n,         (numeric, required) The output number\n         "sequence":n      (numeric, optional) The sequence number\n       } \n       ,...\n     ]\n2. "outputs"               (object, required) a json object with outputs\n    {\n      "address": x.xxx,    (numeric or string, required) The key is the pacglobal address, the numeric value (can be string) is the PAC amount\n      "data": "hex"      (string, required) The key is "data", the value is hex encoded data\n      ,...\n    }\n3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n\nResult:\n"transaction"              (string) hex string of the transaction\n\nExamples:\n> pacglobal-cli createrawtransaction "[{\\"txid\\":\\"myid\\",\\"vout\\":0}]" "{\\"address\\":0.01}"\n> pacglobal-cli createrawtransaction "[{\\"txid\\":\\"myid\\",\\"vout\\":0}]" "{\\"data\\":\\"00010203\\"}"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\\"txid\\":\\"myid\\",\\"vout\\":0}]", "{\\"address\\":0.01}"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{\\"txid\\":\\"myid\\",\\"vout\\":0}]", "{\\"data\\":\\"00010203\\"}"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);