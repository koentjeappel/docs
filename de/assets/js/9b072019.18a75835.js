(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[5814],{3905:function(e,t,o){"use strict";o.d(t,{Zo:function(){return p},kt:function(){return m}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(o),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return o?n.createElement(h,c(c({ref:t},p),{},{components:o})):n.createElement(h,c({ref:t},p))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<a;s++)c[s]=o[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},7591:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var n=o(2122),r=o(9756),a=(o(7294),o(3905)),c={sidebar_position:31},i={unversionedId:"core/developers/pac-protocol-core/client-commands/gettxoutproof",id:"core/developers/pac-protocol-core/client-commands/gettxoutproof",isDocsHomePage:!1,title:"gettxoutproof",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/gettxoutproof.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/gettxoutproof",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/gettxoutproof",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/gettxoutproof.mdx",version:"current",sidebarPosition:31,frontMatter:{sidebar_position:31},sidebar:"coreSidebar",previous:{title:"gettxout",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/gettxout"},next:{title:"gettxoutsetinfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/gettxoutsetinfo"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>txids</code>",id:"txids",children:[]},{value:"<code>blockhash</code>",id:"blockhash",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],s={toc:l};function p(e){var t=e.components,o=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli gettxoutproof ["txid",...] ( blockhash )\n')),(0,a.kt)("p",null,'Returns a hex-encoded proof that "txid" was included in a block.'),(0,a.kt)("p",null,"NOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash)."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"txids"},(0,a.kt)("inlineCode",{parentName:"h3"},"txids")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string)")),(0,a.kt)("p",null,"A json array of txids to filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n    "txid"     (string) A transaction hash\n    ,...\n]\n')),(0,a.kt)("h3",{id:"blockhash"},(0,a.kt)("inlineCode",{parentName:"h3"},"blockhash")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, optional)")),(0,a.kt)("p",null,"If specified, looks for txid in the block with this hash"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli gettxoutproof '[\"mytxid\",...]'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli gettxoutproof \'["mytxid",...]\' "blockhash"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutproof", "params": [["mytxid",...], "blockhash"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'"data"           #(string) A string that is a serialized, hex-encoded data for the proof.\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help gettxoutproof\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'gettxoutproof ["txid",...] ( blockhash )\n\nReturns a hex-encoded proof that "txid" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash).\n\nArguments:\n1. "txids"       (string) A json array of txids to filter\n    [\n      "txid"     (string) A transaction hash\n      ,...\n    ]\n2. "blockhash"   (string, optional) If specified, looks for txid in the block with this hash\n\nResult:\n"data"           (string) A string that is a serialized, hex-encoded data for the proof.\n\nExamples:\n> pacglobal-cli gettxoutproof \'["mytxid",...]\'\n> pacglobal-cli gettxoutproof \'["mytxid",...]\' "blockhash"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutproof", "params": [["mytxid",...], "blockhash"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);