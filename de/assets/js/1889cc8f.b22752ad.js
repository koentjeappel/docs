(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[2556],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return u}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),i=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=i(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=i(t),u=r,f=d["".concat(l,".").concat(u)]||d[u]||p[u]||a;return t?o.createElement(f,c(c({ref:n},m),{},{components:t})):o.createElement(f,c({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var i=2;i<a;i++)c[i]=t[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9398:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return m}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),c={sidebar_position:52},s={unversionedId:"core/developers/pac-protocol-core/client-commands/masternode",id:"core/developers/pac-protocol-core/client-commands/masternode",isDocsHomePage:!1,title:"masternode",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/masternode.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/masternode",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/masternode",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/masternode.mdx",version:"current",sidebarPosition:52,frontMatter:{sidebar_position:52},sidebar:"coreSidebar",previous:{title:"gobject",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/gobject"},next:{title:"masternodelist",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/masternodelist"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>command</code> <span class='asterisk'>*</span>",id:"command-",children:[]}]}],i={toc:l};function m(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli masternode "command" ...\n')),(0,a.kt)("p",null,'masternode "command" ...\nSet of commands to execute masternode related actions'),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"command-"},(0,a.kt)("inlineCode",{parentName:"h3"},"command")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string or set of strings, required)")),(0,a.kt)("p",null,"The command to execute"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help masternode\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"masternode \"command\" ...\nSet of commands to execute masternode related actions\n\nArguments:\n1. \"command\"        (string or set of strings, required) The command to execute\n\nAvailable commands:\n  count        - Get information about number of masternodes (DEPRECATED options: 'total', 'ps', 'enabled', 'qualify', 'all')\n  current      - Print info on current masternode winner to be paid the next block (calculated locally)\n  outputs      - Print masternode compatible outputs\n  status       - Print masternode status information\n  list         - Print list of all known masternodes (see masternodelist for more info)\n  winner       - Print info on next masternode winner to vote for\n  winners      - Print list of masternode winners\n\n")))}m.isMDXComponent=!0}}]);