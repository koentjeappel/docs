(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[829],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||c;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<c;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2558:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var r=n(2122),o=n(9756),c=(n(7294),n(3905)),a={sidebar_position:81},l={unversionedId:"core/developers/pac-protocol-core/client-commands/getnettotals",id:"core/developers/pac-protocol-core/client-commands/getnettotals",isDocsHomePage:!1,title:"getnettotals",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getnettotals.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getnettotals",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getnettotals",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getnettotals.mdx",version:"current",sidebarPosition:81,frontMatter:{sidebar_position:81},sidebar:"coreSidebar",previous:{title:"getconnectioncount",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getconnectioncount"},next:{title:"getnetworkinfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getnetworkinfo"}},i=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],s={toc:i};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,c.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"command"},"Command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getnettotals\n")),(0,c.kt)("p",null,"Returns information about network traffic, including bytes in, bytes out,\nand current time."),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getnettotals \n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getnettotals", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,c.kt)("h2",{id:"result"},"Result"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "totalbytesrecv": n,   #(numeric) Total bytes received\n  "totalbytessent": n,   #(numeric) Total bytes sent\n  "timemillis": t,       #(numeric) Current UNIX time in milliseconds\n  "uploadtarget":\n  {\n    "timeframe": n,                         #(numeric) Length of the measuring timeframe in seconds\n    "target": n,                            #(numeric) Target in bytes\n    "target_reached": true|false,           #(boolean) True if target is reached\n    "serve_historical_blocks": true|false,  #(boolean) True if serving historical blocks\n    "bytes_left_in_cycle": t,               #(numeric) Bytes left in current time cycle\n    "time_left_in_cycle": t                 #(numeric) Seconds left in current time cycle\n  }\n}\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Running following help command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getnettotals\n")),(0,c.kt)("p",null,"Will produce following output:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'getnettotals\n\nReturns information about network traffic, including bytes in, bytes out,\nand current time.\n\nResult:\n{\n  "totalbytesrecv": n,   (numeric) Total bytes received\n  "totalbytessent": n,   (numeric) Total bytes sent\n  "timemillis": t,       (numeric) Current UNIX time in milliseconds\n  "uploadtarget":\n  {\n    "timeframe": n,                         (numeric) Length of the measuring timeframe in seconds\n    "target": n,                            (numeric) Target in bytes\n    "target_reached": true|false,           (boolean) True if target is reached\n    "serve_historical_blocks": true|false,  (boolean) True if serving historical blocks\n    "bytes_left_in_cycle": t,               (numeric) Bytes left in current time cycle\n    "time_left_in_cycle": t                 (numeric) Seconds left in current time cycle\n  }\n}\n\nExamples:\n> pacglobal-cli getnettotals \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getnettotals", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);