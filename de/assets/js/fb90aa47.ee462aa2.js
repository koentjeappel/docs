(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[691],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(n),d=o,b=m["".concat(p,".").concat(d)]||m[d]||s[d]||a;return n?r.createElement(b,l(l({ref:t},u),{},{components:n})):r.createElement(b,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6167:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),l={sidebar_position:134},c={unversionedId:"core/developers/pac-protocol-core/client-commands/importpubkey",id:"core/developers/pac-protocol-core/client-commands/importpubkey",isDocsHomePage:!1,title:"importpubkey",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/importpubkey.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/importpubkey",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/importpubkey",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/importpubkey.mdx",version:"current",sidebarPosition:134,frontMatter:{sidebar_position:134},sidebar:"coreSidebar",previous:{title:"importprunedfunds",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/importprunedfunds"},next:{title:"importwallet",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/importwallet"}},p=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>pubkey</code> <span class='asterisk'>*</span>",id:"pubkey-",children:[]},{value:"<code>label</code>",id:"label",children:[]},{value:"<code>rescan</code>",id:"rescan",children:[]}]},{value:"Examples",id:"examples",children:[]}],i={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli importpubkey "pubkey" ( "label" rescan )\n')),(0,a.kt)("p",null,"Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"pubkey-"},(0,a.kt)("inlineCode",{parentName:"h3"},"pubkey")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The hex-encoded public key"),(0,a.kt)("h3",{id:"label"},(0,a.kt)("inlineCode",{parentName:"h3"},"label")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},'(string, optional, default="")')),(0,a.kt)("p",null,"An optional label"),(0,a.kt)("h3",{id:"rescan"},(0,a.kt)("inlineCode",{parentName:"h3"},"rescan")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(boolean, optional, default=true)")),(0,a.kt)("p",null,"Rescan the wallet for transactions"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Note: This call can take minutes to complete if rescan is true."),(0,a.kt)("p",null,"Import a public key with rescan"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli importpubkey "mypubkey"\n')),(0,a.kt)("p",null,"Import using a label without rescan"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli importpubkey "mypubkey" "testing" false\n')),(0,a.kt)("p",null,"As a JSON-RPC call"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "importpubkey", "params": ["mypubkey", "testing", false] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help importpubkey\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'importpubkey "pubkey" ( "label" rescan )\n\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\n\nArguments:\n1. "pubkey"           (string, required) The hex-encoded public key\n2. "label"            (string, optional, default="") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nImport a public key with rescan\n> pacglobal-cli importpubkey "mypubkey"\n\nImport using a label without rescan\n> pacglobal-cli importpubkey "mypubkey" "testing" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "importpubkey", "params": ["mypubkey", "testing", false] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);