(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[7769],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(t),p=o,m=u["".concat(s,".").concat(p)]||u[p]||h[p]||a;return t?r.createElement(m,c(c({ref:n},d),{},{components:t})):r.createElement(m,c({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8221:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return s},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),c={sidebar_position:17},i={unversionedId:"core/developers/pac-protocol-core/client-commands/getblockheaders",id:"core/developers/pac-protocol-core/client-commands/getblockheaders",isDocsHomePage:!1,title:"getblockheaders",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getblockheaders.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getblockheaders",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblockheaders",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getblockheaders.mdx",version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"coreSidebar",previous:{title:"getblockheader",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblockheader"},next:{title:"getblockstats",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblockstats"}},s=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>hash</code> <span class='asterisk'>*</span>",id:"hash-",children:[]},{value:"<code>count</code>",id:"count",children:[]},{value:"<code>verbose</code>",id:"verbose",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getblockheaders "hash" ( count verbose )\n')),(0,a.kt)("p",null,"Returns an array of items with information about ","<","count",">"," blockheaders starting from ","<","hash",">","."),(0,a.kt)("p",null,"If verbose is false, each item is a string that is serialized, hex-encoded data for a single blockheader.\nIf verbose is true, each item is an Object with information about a single blockheader."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"hash-"},(0,a.kt)("inlineCode",{parentName:"h3"},"hash")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The block hash"),(0,a.kt)("h3",{id:"count"},(0,a.kt)("inlineCode",{parentName:"h3"},"count")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(numeric, optional, default/max=2000)")),(0,a.kt)("h3",{id:"verbose"},(0,a.kt)("inlineCode",{parentName:"h3"},"verbose")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(boolean, optional, default=true)")),(0,a.kt)("p",null,"true for a json object, false for the hex encoded data"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli getblockheaders "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" 2000\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockheaders", "params": ["00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" 2000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Result #(for verbose = true):\n[ {\n  "hash" : "hash",               #(string)  The block hash\n  "confirmations" : n,           #(numeric) The number of confirmations, or -1 if the block is not on the main chain\n  "height" : n,                  #(numeric) The block height or index\n  "version" : n,                 #(numeric) The block version\n  "merkleroot" : "xxxx",         #(string)  The merkle root\n  "time" : ttt,                  #(numeric) The block time in seconds since epoch #(Jan 1 1970 GMT)\n  "mediantime" : ttt,            #(numeric) The median block time in seconds since epoch #(Jan 1 1970 GMT)\n  "nonce" : n,                   #(numeric) The nonce\n  "bits" : "1d00ffff",           #(string)  The bits\n  "difficulty" : x.xxx,          #(numeric) The difficulty\n  "chainwork" : "0000...1f3"     #(string)  Expected number of hashes required to produce the current chain #(in hex)\n  "previousblockhash" : "hash",  #(string)  The hash of the previous block\n  "nextblockhash" : "hash",      #(string)  The hash of the next block\n}, {\n       ...\n   },\n...\n]\n\nResult #(for verbose=false):\n[\n  "data",                        #(string)  A string that is serialized, hex-encoded data for block header.\n  ...\n]\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getblockheaders\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'getblockheaders "hash" ( count verbose )\n\nReturns an array of items with information about <count> blockheaders starting from <hash>.\n\nIf verbose is false, each item is a string that is serialized, hex-encoded data for a single blockheader.\nIf verbose is true, each item is an Object with information about a single blockheader.\n\nArguments:\n1. "hash"          (string, required) The block hash\n2. count           (numeric, optional, default/max=2000)\n3. verbose         (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n[ {\n  "hash" : "hash",               (string)  The block hash\n  "confirmations" : n,           (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  "height" : n,                  (numeric) The block height or index\n  "version" : n,                 (numeric) The block version\n  "merkleroot" : "xxxx",         (string)  The merkle root\n  "time" : ttt,                  (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  "mediantime" : ttt,            (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n  "nonce" : n,                   (numeric) The nonce\n  "bits" : "1d00ffff",           (string)  The bits\n  "difficulty" : x.xxx,          (numeric) The difficulty\n  "chainwork" : "0000...1f3"     (string)  Expected number of hashes required to produce the current chain (in hex)\n  "previousblockhash" : "hash",  (string)  The hash of the previous block\n  "nextblockhash" : "hash",      (string)  The hash of the next block\n}, {\n       ...\n   },\n...\n]\n\nResult (for verbose=false):\n[\n  "data",                        (string)  A string that is serialized, hex-encoded data for block header.\n  ...\n]\n\nExamples:\n> pacglobal-cli getblockheaders "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" 2000\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockheaders", "params": ["00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" 2000] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}d.isMDXComponent=!0}}]);