(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[5236],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,b=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(b,i(i({ref:t},p),{},{components:n})):a.createElement(b,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1729:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i={sidebar_position:69},s={unversionedId:"core/developers/pac-protocol-core/client-commands/getblocktemplate",id:"core/developers/pac-protocol-core/client-commands/getblocktemplate",isDocsHomePage:!1,title:"getblocktemplate",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getblocktemplate.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getblocktemplate",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getblocktemplate",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getblocktemplate.mdx",version:"current",sidebarPosition:69,frontMatter:{sidebar_position:69},sidebar:"coreSidebar",previous:{title:"generatetoaddress",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/generatetoaddress"},next:{title:"getmininginfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getmininginfo"}},c=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>template_request</code>",id:"template_request",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getblocktemplate ( TemplateRequest )\n")),(0,o.kt)("p",null,"If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nFor full specification, see BIPs 22, 23, and 9:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki"},"https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki"},"https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes"},"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes")),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"template_request"},(0,o.kt)("inlineCode",{parentName:"h3"},"template_request")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(json object, optional)")),(0,o.kt)("p",null,"A json object in the following spec"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "mode":"template"    (string, optional) This must be set to "template", "proposal" (see BIP 23), or omitted\n     "capabilities":[     (array, optional) A list of strings\n         "support"        (string) client side supported feature, \'longpoll\', \'coinbasetxn\', \'coinbasevalue\', \'proposal\', \'serverlist\', \'workid\'\n         ,...\n],\n     "rules":[        (array, optional) A list of strings\n         "support"        (string) client side supported softfork deployment\n         ,...\n]\n}\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getblocktemplate \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblocktemplate", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "capabilities" : [ "capability", ... ],    #(array of strings) specific client side supported features\n  "version" : n,                    #(numeric) The preferred block version\n  "rules" : [ "rulename", ... ],    #(array of strings) specific block rules that are to be enforced\n  "vbavailable" : {                 #(json object) set of pending, supported versionbit #(BIP 9) softfork deployments\n      "rulename" : bitnumber          #(numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\n      ,...\n  },\n  "vbrequired" : n,                 #(numeric) bit mask of versionbits the server requires set in submissions\n  "previousblockhash" : "xxxx",     #(string) The hash of current highest block\n  "transactions" : [                #(array) contents of non-coinbase transactions that should be included in the next block\n      {\n         "data" : "xxxx",             #(string) transaction data encoded in hexadecimal #(byte-for-byte)\n         "hash" : "xxxx",             #(string) hash/id encoded in little-endian hexadecimal\n         "depends" : [                #(array) array of numbers \n             n                          #(numeric) transactions before this one #(by 1-based index in \'transactions\' list) that must be present in the final block if this one is\n             ,...\n         ],\n         "fee": n,                    #(numeric) difference in value between transaction inputs and outputs #(in duffs); for coinbase transactions, this is a negative Number of the total collected block fees #(ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn\'t one\n         "sigops" : n,                #(numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren\'t any\n         "required" : true|false      #(boolean) if provided and true, this transaction must be in the final block\n      }\n      ,...\n  ],\n  "coinbaseaux" : {                 #(json object) data that should be included in the coinbase\'s scriptSig content\n      "flags" : "xx"                  #(string) key name is to be ignored, and value included in scriptSig\n  },\n  "coinbasevalue" : n,              #(numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees #(in duffs)\n  "coinbasetxn" : { ... },          #(json object) information for coinbase transaction\n  "target" : "xxxx",                #(string) The hash target\n  "mintime" : xxx,                  #(numeric) The minimum timestamp appropriate for next block time in seconds since epoch #(Jan 1 1970 GMT)\n  "mutable" : [                     #(array of string) list of ways the block template may be changed \n     "value"                          #(string) A way the block template may be changed, e.g. \'time\', \'transactions\', \'prevblock\'\n     ,...\n  ],\n  "noncerange" : "00000000ffffffff",#(string) A range of valid nonces\n  "sigoplimit" : n,                 #(numeric) limit of sigops in blocks\n  "sizelimit" : n,                  #(numeric) limit of block size\n  "curtime" : ttt,                  #(numeric) current timestamp in seconds since epoch #(Jan 1 1970 GMT)\n  "bits" : "xxxxxxxx",              #(string) compressed target of next block\n  "previousbits" : "xxxxxxxx",      #(string) compressed target of current highest block\n  "height" : n                      #(numeric) The height of the next block\n  "masternode" : [                  #(array) required masternode payments that must be included in the next block\n      {\n         "payee" : "xxxx",          #(string) payee address\n         "script" : "xxxx",         #(string) payee scriptPubKey\n         "amount": n                #(numeric) required amount to pay\n      }\n  },\n  "masternode_payments_started" :  true|false, #(boolean) true, if masternode payments started\n  "masternode_payments_enforced" : true|false, #(boolean) true, if masternode payments are enforced\n  "superblock" : [                  #(array) required superblock payees that must be included in the next block\n      {\n         "payee" : "xxxx",          #(string) payee address\n         "script" : "xxxx",         #(string) payee scriptPubKey\n         "amount": n                #(numeric) required amount to pay\n      }\n      ,...\n  ],\n  "superblocks_started" : true|false, #(boolean) true, if superblock payments started\n  "superblocks_enabled" : true|false, #(boolean) true, if superblock payments are enabled\n  "coinbase_payload" : "xxxxxxxx"    #(string) coinbase transaction payload data encoded in hexadecimal\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getblocktemplate\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'getblocktemplate ( TemplateRequest )\n\nIf the request parameters include a \'mode\' key, that is used to explicitly select between the default \'template\' request or a \'proposal\'.\nIt returns data needed to construct a block to work on.\nFor full specification, see BIPs 22, 23, and 9:\n    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\n    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\n\nArguments:\n1. template_request         (json object, optional) A json object in the following spec\n     {\n       "mode":"template"    (string, optional) This must be set to "template", "proposal" (see BIP 23), or omitted\n       "capabilities":[     (array, optional) A list of strings\n           "support"          (string) client side supported feature, \'longpoll\', \'coinbasetxn\', \'coinbasevalue\', \'proposal\', \'serverlist\', \'workid\'\n           ,...\n       ],\n       "rules":[            (array, optional) A list of strings\n           "support"          (string) client side supported softfork deployment\n           ,...\n       ]\n     }\n\n\nResult:\n{\n  "capabilities" : [ "capability", ... ],    (array of strings) specific client side supported features\n  "version" : n,                    (numeric) The preferred block version\n  "rules" : [ "rulename", ... ],    (array of strings) specific block rules that are to be enforced\n  "vbavailable" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\n      "rulename" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\n      ,...\n  },\n  "vbrequired" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\n  "previousblockhash" : "xxxx",     (string) The hash of current highest block\n  "transactions" : [                (array) contents of non-coinbase transactions that should be included in the next block\n      {\n         "data" : "xxxx",             (string) transaction data encoded in hexadecimal (byte-for-byte)\n         "hash" : "xxxx",             (string) hash/id encoded in little-endian hexadecimal\n         "depends" : [                (array) array of numbers \n             n                          (numeric) transactions before this one (by 1-based index in \'transactions\' list) that must be present in the final block if this one is\n             ,...\n         ],\n         "fee": n,                    (numeric) difference in value between transaction inputs and outputs (in duffs); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn\'t one\n         "sigops" : n,                (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren\'t any\n         "required" : true|false      (boolean) if provided and true, this transaction must be in the final block\n      }\n      ,...\n  ],\n  "coinbaseaux" : {                 (json object) data that should be included in the coinbase\'s scriptSig content\n      "flags" : "xx"                  (string) key name is to be ignored, and value included in scriptSig\n  },\n  "coinbasevalue" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in duffs)\n  "coinbasetxn" : { ... },          (json object) information for coinbase transaction\n  "target" : "xxxx",                (string) The hash target\n  "mintime" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n  "mutable" : [                     (array of string) list of ways the block template may be changed \n     "value"                          (string) A way the block template may be changed, e.g. \'time\', \'transactions\', \'prevblock\'\n     ,...\n  ],\n  "noncerange" : "00000000ffffffff",(string) A range of valid nonces\n  "sigoplimit" : n,                 (numeric) limit of sigops in blocks\n  "sizelimit" : n,                  (numeric) limit of block size\n  "curtime" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n  "bits" : "xxxxxxxx",              (string) compressed target of next block\n  "previousbits" : "xxxxxxxx",      (string) compressed target of current highest block\n  "height" : n                      (numeric) The height of the next block\n  "masternode" : [                  (array) required masternode payments that must be included in the next block\n      {\n         "payee" : "xxxx",          (string) payee address\n         "script" : "xxxx",         (string) payee scriptPubKey\n         "amount": n                (numeric) required amount to pay\n      }\n  },\n  "masternode_payments_started" :  true|false, (boolean) true, if masternode payments started\n  "masternode_payments_enforced" : true|false, (boolean) true, if masternode payments are enforced\n  "superblock" : [                  (array) required superblock payees that must be included in the next block\n      {\n         "payee" : "xxxx",          (string) payee address\n         "script" : "xxxx",         (string) payee scriptPubKey\n         "amount": n                (numeric) required amount to pay\n      }\n      ,...\n  ],\n  "superblocks_started" : true|false, (boolean) true, if superblock payments started\n  "superblocks_enabled" : true|false, (boolean) true, if superblock payments are enabled\n  "coinbase_payload" : "xxxxxxxx"    (string) coinbase transaction payload data encoded in hexadecimal\n}\n\nExamples:\n> pacglobal-cli getblocktemplate \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblocktemplate", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);