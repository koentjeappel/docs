(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6747],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return i},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),h=p(a),m=r,d=h["".concat(c,".").concat(m)]||h[m]||u[m]||l;return a?n.createElement(d,s(s({ref:t},i),{},{components:a})):n.createElement(d,s({ref:t},i))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5126:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return c},default:function(){return i}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),s={sidebar_position:117},o={unversionedId:"core/developers/pac-protocol-core/client-commands/encryptwallet",id:"core/developers/pac-protocol-core/client-commands/encryptwallet",isDocsHomePage:!1,title:"encryptwallet",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/encryptwallet.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/encryptwallet",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/encryptwallet",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/encryptwallet.mdx",version:"current",sidebarPosition:117,frontMatter:{sidebar_position:117},sidebar:"coreSidebar",previous:{title:"dumpwallet",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/dumpwallet"},next:{title:"getaccount",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getaccount"}},c=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>passphrase</code>",id:"passphrase",children:[]}]},{value:"Examples",id:"examples",children:[]}],p={toc:c};function i(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"command"},"Command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli encryptwallet "passphrase"\n')),(0,l.kt)("p",null,"Encrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing\nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server."),(0,l.kt)("h2",{id:"arguments"},"Arguments"),(0,l.kt)("h3",{id:"passphrase"},(0,l.kt)("inlineCode",{parentName:"h3"},"passphrase")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(string)")),(0,l.kt)("p",null,"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Encrypt your wallet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli encryptwallet "my pass phrase"\n')),(0,l.kt)("p",null,"Now set the passphrase to use the wallet, such as for signing or sending dash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli walletpassphrase "my pass phrase"\n')),(0,l.kt)("p",null,"Now we can do something like sign"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli signmessage "address" "test message"\n')),(0,l.kt)("p",null,"Now lock the wallet again by removing the passphrase"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli walletlock \n")),(0,l.kt)("p",null,"As a json rpc call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "encryptwallet", "params": ["my pass phrase"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Running following help command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help encryptwallet\n")),(0,l.kt)("p",null,"Will produce following output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'encryptwallet "passphrase"\n\nEncrypts the wallet with \'passphrase\'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server.\n\nArguments:\n1. "passphrase"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\n\nExamples:\n\nEncrypt your wallet\n> pacglobal-cli encryptwallet "my pass phrase"\n\nNow set the passphrase to use the wallet, such as for signing or sending dash\n> pacglobal-cli walletpassphrase "my pass phrase"\n\nNow we can do something like sign\n> pacglobal-cli signmessage "address" "test message"\n\nNow lock the wallet again by removing the passphrase\n> pacglobal-cli walletlock \n\nAs a json rpc call\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "encryptwallet", "params": ["my pass phrase"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}i.isMDXComponent=!0}}]);