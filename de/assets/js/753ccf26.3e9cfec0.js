(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[4284],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=o,x=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(x,a(a({ref:n},u),{},{components:t})):r.createElement(x,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7795:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={sidebar_position:49},s={unversionedId:"core/developers/pac-protocol-core/client-commands/getprivatesendinfo",id:"core/developers/pac-protocol-core/client-commands/getprivatesendinfo",isDocsHomePage:!1,title:"getprivatesendinfo",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getprivatesendinfo.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getprivatesendinfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getprivatesendinfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getprivatesendinfo.mdx",version:"current",sidebarPosition:49,frontMatter:{sidebar_position:49},sidebar:"coreSidebar",previous:{title:"getpoolinfo",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getpoolinfo"},next:{title:"getsuperblockbudget",permalink:"/de/docs/core/developers/pac-protocol-core/client-commands/getsuperblockbudget"}},c=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:c};function u(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"command"},"Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getprivatesendinfo\n")),(0,i.kt)("p",null,"getprivatesendinfo\nReturns an object containing an information about PrivateSend settings and state."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getprivatesendinfo \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getprivatesendinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,i.kt)("h2",{id:"result"},"Result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Result #(for regular nodes):\n{\n  "enabled": true|false,             #(bool) Whether mixing functionality is enabled\n  "running": true|false,             #(bool) Whether mixing is currently running\n  "multisession": true|false,        #(bool) Whether PrivateSend Multisession option is enabled\n  "max_sessions": xxx,               #(numeric) How many parallel mixing sessions can there be at once\n  "max_rounds": xxx,                 #(numeric) How many rounds to mix\n  "max_amount": xxx,                 #(numeric) Target PrivateSend balance in PAC\n  "max_denoms": xxx,                 #(numeric) How many inputs of each denominated amount to create\n  "queue_size": xxx,                 #(numeric) How many queues there are currently on the network\n  "sessions":                        #(array of json objects)\n    [\n      {\n      "protxhash": "...",            #(string) The ProTxHash of the masternode\n      "outpoint": "txid-index",      #(string) The outpoint of the masternode\n      "service": "host:port",        #(string) The IP address and port of the masternode\n      "denomination": xxx,           #(numeric) The denomination of the mixing session in PAC\n      "state": "...",                #(string) Current state of the mixing session\n      "entries_count": xxx,          #(numeric) The number of entries in the mixing session\n      }\n      ,...\n    ],\n  "keys_left": xxx,                  #(numeric) How many new keys are left since last automatic backup\n  "warnings": "..."                  #(string) Warnings if any\n}\n\nResult #(for masternodes):\n{\n  "queue_size": xxx,                 #(numeric) How many queues there are currently on the network\n  "denomination": xxx,               #(numeric) The denomination of the mixing session in PAC\n  "state": "...",                    #(string) Current state of the mixing session\n  "entries_count": xxx,              #(numeric) The number of entries in the mixing session\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Running following help command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getprivatesendinfo\n")),(0,i.kt)("p",null,"Will produce following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'getprivatesendinfo\nReturns an object containing an information about PrivateSend settings and state.\n\nResult (for regular nodes):\n{\n  "enabled": true|false,             (bool) Whether mixing functionality is enabled\n  "running": true|false,             (bool) Whether mixing is currently running\n  "multisession": true|false,        (bool) Whether PrivateSend Multisession option is enabled\n  "max_sessions": xxx,               (numeric) How many parallel mixing sessions can there be at once\n  "max_rounds": xxx,                 (numeric) How many rounds to mix\n  "max_amount": xxx,                 (numeric) Target PrivateSend balance in PAC\n  "max_denoms": xxx,                 (numeric) How many inputs of each denominated amount to create\n  "queue_size": xxx,                 (numeric) How many queues there are currently on the network\n  "sessions":                        (array of json objects)\n    [\n      {\n      "protxhash": "...",            (string) The ProTxHash of the masternode\n      "outpoint": "txid-index",      (string) The outpoint of the masternode\n      "service": "host:port",        (string) The IP address and port of the masternode\n      "denomination": xxx,           (numeric) The denomination of the mixing session in PAC\n      "state": "...",                (string) Current state of the mixing session\n      "entries_count": xxx,          (numeric) The number of entries in the mixing session\n      }\n      ,...\n    ],\n  "keys_left": xxx,                  (numeric) How many new keys are left since last automatic backup\n  "warnings": "..."                  (string) Warnings if any\n}\n\nResult (for masternodes):\n{\n  "queue_size": xxx,                 (numeric) How many queues there are currently on the network\n  "denomination": xxx,               (numeric) The denomination of the mixing session in PAC\n  "state": "...",                    (string) Current state of the mixing session\n  "entries_count": xxx,              (numeric) The number of entries in the mixing session\n}\n\nExamples:\n> pacglobal-cli getprivatesendinfo \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getprivatesendinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);