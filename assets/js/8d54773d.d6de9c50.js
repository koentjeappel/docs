(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6322],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),x=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=x(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=x(n),p=a,d=m["".concat(s,".").concat(p)]||m[p]||u[p]||o;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var x=2;x<o;x++)i[x]=n[x];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},902:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return x},toc:function(){return l},default:function(){return m}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],c={sidebar_position:46},s="getblockstats",x={unversionedId:"developers/pac-protocol-core/client-commands/getblockstats",id:"developers/pac-protocol-core/client-commands/getblockstats",isDocsHomePage:!1,title:"getblockstats",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/getblockstats.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/getblockstats",permalink:"/developers/pac-protocol-core/client-commands/getblockstats",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/getblockstats.mdx",version:"current",sidebarPosition:46,frontMatter:{sidebar_position:46},sidebar:"coreSidebar",previous:{title:"getblockheaders",permalink:"/developers/pac-protocol-core/client-commands/getblockheaders"},next:{title:"getblocktemplate",permalink:"/developers/pac-protocol-core/client-commands/getblocktemplate"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>hash_or_height</code> <span class='asterisk'>*</span>",id:"hash_or_height-",children:[]},{value:"<code>stats</code>",id:"stats",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],u={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getblockstats"},"getblockstats"),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getblockstats hash_or_height ( stats )\n")),(0,o.kt)("p",null,"Compute per block statistics for a given window. All amounts are in duffs.\nIt won't work for some heights with pruning.\nIt won't work without -txindex for utxo_size_inc, ",(0,o.kt)("em",{parentName:"p"},"fee or "),"feerate stats."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"hash_or_height-"},(0,o.kt)("inlineCode",{parentName:"h3"},"hash_or_height")," ",(0,o.kt)("span",{class:"asterisk"},"*")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(string or numeric, required)")),(0,o.kt)("p",null,"The block hash or height of the target block"),(0,o.kt)("h3",{id:"stats"},(0,o.kt)("inlineCode",{parentName:"h3"},"stats")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(array,optional)")),(0,o.kt)("p",null,"Values to plot, by default all values (see result below)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    "height",       (string, optional) Selected statistic\n    "time",         (string, optional) Selected statistic\n    ,...\n]\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getblockstats 1000 \'["minfeerate","avgfeerate"]\'\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockstats", "params": [1000 \'["minfeerate","avgfeerate"]\'] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{                           #(json object)\n  "avgfee": xxxxx,          #(numeric) Average fee in the block\n  "avgfeerate": xxxxx,      #(numeric) Average feerate #(in duffs per byte)\n  "avgtxsize": xxxxx,       #(numeric) Average transaction size\n  "blockhash": xxxxx,       #(string) The block hash #(to check for potential reorgs)\n  "height": xxxxx,          #(numeric) The height of the block\n  "ins": xxxxx,             #(numeric) The number of inputs #(excluding coinbase)\n  "maxfee": xxxxx,          #(numeric) Maximum fee in the block\n  "maxfeerate": xxxxx,      #(numeric) Maximum feerate #(in duffs per byte)\n  "maxtxsize": xxxxx,       #(numeric) Maximum transaction size\n  "medianfee": xxxxx,       #(numeric) Truncated median fee in the block\n  "medianfeerate": xxxxx,   #(numeric) Truncated median feerate #(in duffs per byte)\n  "mediantime": xxxxx,      #(numeric) The block median time past\n  "mediantxsize": xxxxx,    #(numeric) Truncated median transaction size\n  "minfee": xxxxx,          #(numeric) Minimum fee in the block\n  "minfeerate": xxxxx,      #(numeric) Minimum feerate #(in duffs per byte)\n  "mintxsize": xxxxx,       #(numeric) Minimum transaction size\n  "outs": xxxxx,            #(numeric) The number of outputs\n  "subsidy": xxxxx,         #(numeric) The block subsidy\n  "time": xxxxx,            #(numeric) The block time\n  "total_out": xxxxx,       #(numeric) Total amount in all outputs #(excluding coinbase and thus reward [ie subsidy + totalfee])\n  "total_size": xxxxx,      #(numeric) Total size of all non-coinbase transactions\n  "totalfee": xxxxx,        #(numeric) The fee total\n  "txs": xxxxx,             #(numeric) The number of transactions #(excluding coinbase)\n  "utxo_increase": xxxxx,   #(numeric) The increase/decrease in the number of unspent outputs\n  "utxo_size_inc": xxxxx,   #(numeric) The increase/decrease in size for the utxo index #(not discounting op_return and similar)\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getblockstats\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'getblockstats hash_or_height ( stats )\n\nCompute per block statistics for a given window. All amounts are in duffs.\nIt won\'t work for some heights with pruning.\nIt won\'t work without -txindex for utxo_size_inc, *fee or *feerate stats.\n\nArguments:\n1. "hash_or_height"     (string or numeric, required) The block hash or height of the target block\n2. "stats"              (array,  optional) Values to plot, by default all values (see result below)\n    [\n      "height",         (string, optional) Selected statistic\n      "time",           (string, optional) Selected statistic\n      ,...\n    ]\n\nResult:\n{                           (json object)\n  "avgfee": xxxxx,          (numeric) Average fee in the block\n  "avgfeerate": xxxxx,      (numeric) Average feerate (in duffs per byte)\n  "avgtxsize": xxxxx,       (numeric) Average transaction size\n  "blockhash": xxxxx,       (string) The block hash (to check for potential reorgs)\n  "height": xxxxx,          (numeric) The height of the block\n  "ins": xxxxx,             (numeric) The number of inputs (excluding coinbase)\n  "maxfee": xxxxx,          (numeric) Maximum fee in the block\n  "maxfeerate": xxxxx,      (numeric) Maximum feerate (in duffs per byte)\n  "maxtxsize": xxxxx,       (numeric) Maximum transaction size\n  "medianfee": xxxxx,       (numeric) Truncated median fee in the block\n  "medianfeerate": xxxxx,   (numeric) Truncated median feerate (in duffs per byte)\n  "mediantime": xxxxx,      (numeric) The block median time past\n  "mediantxsize": xxxxx,    (numeric) Truncated median transaction size\n  "minfee": xxxxx,          (numeric) Minimum fee in the block\n  "minfeerate": xxxxx,      (numeric) Minimum feerate (in duffs per byte)\n  "mintxsize": xxxxx,       (numeric) Minimum transaction size\n  "outs": xxxxx,            (numeric) The number of outputs\n  "subsidy": xxxxx,         (numeric) The block subsidy\n  "time": xxxxx,            (numeric) The block time\n  "total_out": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\n  "total_size": xxxxx,      (numeric) Total size of all non-coinbase transactions\n  "totalfee": xxxxx,        (numeric) The fee total\n  "txs": xxxxx,             (numeric) The number of transactions (excluding coinbase)\n  "utxo_increase": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\n  "utxo_size_inc": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\n}\n\nExamples:\n> pacprotocol-cli getblockstats 1000 \'["minfeerate","avgfeerate"]\'\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockstats", "params": [1000 \'["minfeerate","avgfeerate"]\'] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}m.isMDXComponent=!0}}]);