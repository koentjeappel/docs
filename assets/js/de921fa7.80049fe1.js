(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[4287],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return x}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function m(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?m(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},m=Object.keys(e);for(o=0;o<m.length;o++)t=m[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(o=0;o<m.length;o++)t=m[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),i=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=i(e.components);return o.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,m=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(t),x=r,f=u["".concat(c,".").concat(x)]||u[x]||s[x]||m;return t?o.createElement(f,a(a({ref:n},p),{},{components:t})):o.createElement(f,a({ref:n},p))}));function x(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var m=t.length,a=new Array(m);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var i=2;i<m;i++)a[i]=t[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5095:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var o=t(2122),r=t(9756),m=(t(7294),t(3905)),a=["components"],l={sidebar_position:58},c="getmempoolinfo",i={unversionedId:"developers/pac-protocol-core/client-commands/getmempoolinfo",id:"developers/pac-protocol-core/client-commands/getmempoolinfo",isDocsHomePage:!1,title:"getmempoolinfo",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/getmempoolinfo.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/getmempoolinfo",permalink:"/developers/pac-protocol-core/client-commands/getmempoolinfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/getmempoolinfo.mdx",version:"current",sidebarPosition:58,frontMatter:{sidebar_position:58},sidebar:"coreSidebar",previous:{title:"getmempoolentry",permalink:"/developers/pac-protocol-core/client-commands/getmempoolentry"},next:{title:"getmerkleblocks",permalink:"/developers/pac-protocol-core/client-commands/getmerkleblocks"}},p=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],s={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,a);return(0,m.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"getmempoolinfo"},"getmempoolinfo"),(0,m.kt)("h2",{id:"command"},"Command"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getmempoolinfo\n")),(0,m.kt)("p",null,"Returns details on the active state of the TX memory pool."),(0,m.kt)("h2",{id:"examples"},"Examples"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getmempoolinfo \n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getmempoolinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,m.kt)("h2",{id:"result"},"Result"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "size": xxxxx,               #(numeric) Current tx count\n  "bytes": xxxxx,              #(numeric) Sum of all tx sizes\n  "usage": xxxxx,              #(numeric) Total memory usage for the mempool\n  "maxmempool": xxxxx,         #(numeric) Maximum memory usage for the mempool\n  "mempoolminfee": xxxxx       #(numeric) Minimum fee rate in PAC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\n  "minrelaytxfee": xxxxx       #(numeric) Current minimum relay fee for transactions\n  "instantsendlocks": xxxxx,   #(numeric) Number of unconfirmed instant send locks\n}\n')),(0,m.kt)("hr",null),(0,m.kt)("p",null,"Running following help command"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getmempoolinfo\n")),(0,m.kt)("p",null,"Will produce following output:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"},'getmempoolinfo\n\nReturns details on the active state of the TX memory pool.\n\nResult:\n{\n  "size": xxxxx,               (numeric) Current tx count\n  "bytes": xxxxx,              (numeric) Sum of all tx sizes\n  "usage": xxxxx,              (numeric) Total memory usage for the mempool\n  "maxmempool": xxxxx,         (numeric) Maximum memory usage for the mempool\n  "mempoolminfee": xxxxx       (numeric) Minimum fee rate in PAC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\n  "minrelaytxfee": xxxxx       (numeric) Current minimum relay fee for transactions\n  "instantsendlocks": xxxxx,   (numeric) Number of unconfirmed instant send locks\n}\n\nExamples:\n> pacprotocol-cli getmempoolinfo \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getmempoolinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);