(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6676],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9433:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:137},c="signrawtransactionwithwallet",l={unversionedId:"developers/pac-protocol-core/client-commands/signrawtransactionwithwallet",id:"developers/pac-protocol-core/client-commands/signrawtransactionwithwallet",isDocsHomePage:!1,title:"signrawtransactionwithwallet",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/signrawtransactionwithwallet.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/signrawtransactionwithwallet",permalink:"/developers/pac-protocol-core/client-commands/signrawtransactionwithwallet",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/signrawtransactionwithwallet.mdx",version:"current",sidebarPosition:137,frontMatter:{sidebar_position:137},sidebar:"coreSidebar",previous:{title:"signrawtransactionwithkey",permalink:"/developers/pac-protocol-core/client-commands/signrawtransactionwithkey"},next:{title:"spork",permalink:"/developers/pac-protocol-core/client-commands/spork"}},p=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>hexstring</code> <span class='asterisk'>*</span>",id:"hexstring-",children:[]},{value:"<code>prevtxs</code>",id:"prevtxs",children:[]},{value:"<code>sighashtype</code>",id:"sighashtype",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"signrawtransactionwithwallet"},"signrawtransactionwithwallet"),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli signrawtransactionwithwallet "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )\n')),(0,o.kt)("p",null,"Sign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"hexstring-"},(0,o.kt)("inlineCode",{parentName:"h3"},"hexstring")," ",(0,o.kt)("span",{class:"asterisk"},"*")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(string, required)")),(0,o.kt)("p",null,"The transaction hex string"),(0,o.kt)("h3",{id:"prevtxs"},(0,o.kt)("inlineCode",{parentName:"h3"},"prevtxs")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(string, optional)")),(0,o.kt)("p",null,"An json array of previous dependent transaction outputs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[                    (json array of json objects, or \'null\' if none provided)\n     {\n       "txid":"id",           (string, required) The transaction id\n       "vout":n,            (numeric, required) The output number\n       "scriptPubKey": "hex",     (string, required) script key\n       "redeemScript": "hex",     (string, required for P2SH) redeem script\n       "amount": value        (numeric, required) The amount spent\n}\n     ,...\n]\n')),(0,o.kt)("h3",{id:"sighashtype"},(0,o.kt)("inlineCode",{parentName:"h3"},"sighashtype")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(string, optional, default=ALL)")),(0,o.kt)("p",null,'The signature hash type. Must be one of\n"ALL"\n"NONE"\n"SINGLE"\n"ALL|ANYONECANPAY"\n"NONE|ANYONECANPAY"\n"SINGLE|ANYONECANPAY"'),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli signrawtransactionwithwallet "myhex"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransactionwithwallet", "params": ["myhex"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "hex" : "value",                  #(string) The hex-encoded raw transaction with signature#(s)\n  "complete" : true|false,          #(boolean) If the transaction has a complete set of signatures\n  "errors" : [                      #(json array of objects) Script verification errors #(if there are any)\n    {\n      "txid" : "hash",              #(string) The hash of the referenced, previous transaction\n      "vout" : n,                   #(numeric) The index of the output to spent and used as input\n      "scriptSig" : "hex",          #(string) The hex-encoded signature script\n      "sequence" : n,               #(numeric) Script sequence number\n      "error" : "text"              #(string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help signrawtransactionwithwallet\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'signrawtransactionwithwallet "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] sighashtype )\n\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\n\n\nArguments:\n1. "hexstring"                      (string, required) The transaction hex string\n2. "prevtxs"                        (string, optional) An json array of previous dependent transaction outputs\n     [                              (json array of json objects, or \'null\' if none provided)\n       {\n         "txid":"id",               (string, required) The transaction id\n         "vout":n,                  (numeric, required) The output number\n         "scriptPubKey": "hex",     (string, required) script key\n         "redeemScript": "hex",     (string, required for P2SH) redeem script\n         "amount": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n3. "sighashtype"                    (string, optional, default=ALL) The signature hash type. Must be one of\n       "ALL"\n       "NONE"\n       "SINGLE"\n       "ALL|ANYONECANPAY"\n       "NONE|ANYONECANPAY"\n       "SINGLE|ANYONECANPAY"\n\nResult:\n{\n  "hex" : "value",                  (string) The hex-encoded raw transaction with signature(s)\n  "complete" : true|false,          (boolean) If the transaction has a complete set of signatures\n  "errors" : [                      (json array of objects) Script verification errors (if there are any)\n    {\n      "txid" : "hash",              (string) The hash of the referenced, previous transaction\n      "vout" : n,                   (numeric) The index of the output to spent and used as input\n      "scriptSig" : "hex",          (string) The hex-encoded signature script\n      "sequence" : n,               (numeric) Script sequence number\n      "error" : "text"              (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n\nExamples:\n> pacprotocol-cli signrawtransactionwithwallet "myhex"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "signrawtransactionwithwallet", "params": ["myhex"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}d.isMDXComponent=!0}}]);