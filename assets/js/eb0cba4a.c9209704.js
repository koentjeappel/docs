(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8764],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),s=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,m=u["".concat(r,".").concat(h)]||u[h]||p[h]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var d={};for(var r in t)hasOwnProperty.call(t,r)&&(d[r]=t[r]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3873:function(e,t,n){"use strict";n.d(t,{Z:function(){return d}});var a=n(7294),i=n(6010),o="tableOfContentsInline_3fWc";function l(e){var t=e.toc,n=e.isChild;return t.length?a.createElement("ul",{className:n?"":"table-of-contents"},t.map((function(e){return a.createElement("li",{key:e.id},a.createElement("a",{href:"#"+e.id,dangerouslySetInnerHTML:{__html:e.value}}),a.createElement(l,{isChild:!0,toc:e.children}))}))):null}var d=function(e){var t=e.toc;return a.createElement("div",{className:(0,i.Z)(o)},a.createElement(l,{toc:t}))}},5961:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var a=n(2122),i=n(9756),o=(n(7294),n(3905)),l=n(3873),d=["components"],r={sidebar_position:4},s="Daemon Options (pacprotocold)",c={unversionedId:"developers/pac-protocol-core/daemon-options",id:"developers/pac-protocol-core/daemon-options",isDocsHomePage:!1,title:"Daemon Options (pacprotocold)",description:"Usage",source:"@site/docs/developers/pac-protocol-core/daemon-options.mdx",sourceDirName:"developers/pac-protocol-core",slug:"/developers/pac-protocol-core/daemon-options",permalink:"/developers/pac-protocol-core/daemon-options",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/daemon-options.mdx",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"coreSidebar",previous:{title:"Setting up Swapfile",permalink:"/developers/pac-protocol-core/setting-up-swapfile"},next:{title:"Client Options (pacprotocol-cli)",permalink:"/developers/pac-protocol-core/client-options"}},p=[{value:"Options",id:"options",children:[{value:"<code>-?</code>",id:"-",children:[]},{value:"<code>-version</code>",id:"-version",children:[]},{value:"<code>-alertnotify=&lt;cmd&gt;</code>",id:"-alertnotifycmd",children:[]},{value:"<code>-blocknotify=&lt;cmd&gt;</code>",id:"-blocknotifycmd",children:[]},{value:"<code>-conf=&lt;file&gt;</code>",id:"-conffile",children:[]},{value:"<code>-daemon</code>",id:"-daemon",children:[]},{value:"<code>-datadir=&lt;dir&gt;</code>",id:"-datadirdir",children:[]},{value:"<code>-dbcache=&lt;n&gt;</code>",id:"-dbcachen",children:[]},{value:"<code>-debuglogfile=&lt;file&gt;</code>",id:"-debuglogfilefile",children:[]},{value:"<code>-loadblock=&lt;file&gt;</code>",id:"-loadblockfile",children:[]},{value:"<code>-maxorphantxsize=&lt;n&gt;</code>",id:"-maxorphantxsizen",children:[]},{value:"<code>-maxmempool=&lt;n&gt;</code>",id:"-maxmempooln",children:[]},{value:"<code>-mempoolexpiry=&lt;n&gt;</code>",id:"-mempoolexpiryn",children:[]},{value:"<code>-persistmempool</code>",id:"-persistmempool",children:[]},{value:"<code>-syncmempool</code>",id:"-syncmempool",children:[]},{value:"<code>-blockreconstructionextratxn=&lt;n&gt;</code>",id:"-blockreconstructionextratxnn",children:[]},{value:"<code>-par=&lt;n&gt;</code>",id:"-parn",children:[]},{value:"<code>-pid=&lt;file&gt;</code>",id:"-pidfile",children:[]},{value:"<code>-prune=&lt;n&gt;</code>",id:"-prunen",children:[]},{value:"<code>-reindex-chainstate</code>",id:"-reindex-chainstate",children:[]},{value:"<code>-reindex</code>",id:"-reindex",children:[]},{value:"<code>-sysperms</code>",id:"-sysperms",children:[]},{value:"<code>-txindex</code>",id:"-txindex",children:[]},{value:"<code>-addressindex</code>",id:"-addressindex",children:[]},{value:"<code>-timestampindex</code>",id:"-timestampindex",children:[]},{value:"<code>-spentindex</code>",id:"-spentindex",children:[]}]},{value:"RPC Server Options",id:"rpc-server-options",children:[{value:"<code>-server</code>",id:"-server",children:[]},{value:"<code>-rest</code>",id:"-rest",children:[]},{value:"<code>-rpcbind=&lt;addr&gt;[:port]</code>",id:"-rpcbindaddrport",children:[]},{value:"<code>-rpccookiefile=&lt;loc&gt;</code>",id:"-rpccookiefileloc",children:[]},{value:"<code>-rpcuser=&lt;user&gt;</code>",id:"-rpcuseruser",children:[]},{value:"<code>-rpcpassword=&lt;pw&gt;</code>",id:"-rpcpasswordpw",children:[]},{value:"<code>-rpcauth=&lt;userpw&gt;</code>",id:"-rpcauthuserpw",children:[]},{value:"<code>-rpcport=&lt;port&gt;</code>",id:"-rpcportport",children:[]},{value:"<code>-rpcallowip=&lt;ip&gt;</code>",id:"-rpcallowipip",children:[]},{value:"<code>-rpcthreads=&lt;n&gt;</code>",id:"-rpcthreadsn",children:[]}]},{value:"Connection Options",id:"connection-options",children:[{value:"<code>-addnode=&lt;ip&gt;</code>",id:"-addnodeip",children:[]},{value:"<code>-allowprivatenet</code>",id:"-allowprivatenet",children:[]},{value:"<code>-banscore=&lt;n&gt;</code>",id:"-banscoren",children:[]},{value:"<code>-bantime=&lt;n&gt;</code>",id:"-bantimen",children:[]},{value:"<code>-bind=&lt;addr&gt;</code>",id:"-bindaddr",children:[]},{value:"<code>-connect=&lt;ip&gt;</code>",id:"-connectip",children:[]},{value:"<code>-discover</code>",id:"-discover",children:[]},{value:"<code>-dns</code>",id:"-dns",children:[]},{value:"<code>-dnsseed</code>",id:"-dnsseed",children:[]},{value:"<code>-enablebip61</code>",id:"-enablebip61",children:[]},{value:"<code>-externalip=&lt;ip&gt;</code>",id:"-externalipip",children:[]},{value:"<code>-forcednsseed</code>",id:"-forcednsseed",children:[]},{value:"<code>-listen</code>",id:"-listen",children:[]},{value:"<code>-listenonion</code>",id:"-listenonion",children:[]},{value:"<code>-maxconnections=&lt;n&gt;</code>",id:"-maxconnectionsn",children:[]},{value:"<code>-maxreceivebuffer=&lt;n&gt;</code>",id:"-maxreceivebuffern",children:[]},{value:"<code>-maxsendbuffer=&lt;n&gt;</code>",id:"-maxsendbuffern",children:[]},{value:"<code>-maxtimeadjustment</code>",id:"-maxtimeadjustment",children:[]},{value:"<code>-onion=&lt;ip:port&gt;</code>",id:"-onionipport",children:[]},{value:"<code>-onlynet=&lt;net&gt;</code>",id:"-onlynetnet",children:[]},{value:"<code>-permitbaremultisig</code>",id:"-permitbaremultisig",children:[]},{value:"<code>-peerbloomfilters</code>",id:"-peerbloomfilters",children:[]},{value:"<code>-port=&lt;port&gt;</code>",id:"-portport",children:[]},{value:"<code>-proxy=&lt;ip:port&gt;</code>",id:"-proxyipport",children:[]},{value:"<code>-proxyrandomize</code>",id:"-proxyrandomize",children:[]},{value:"<code>-seednode=&lt;ip&gt;</code>",id:"-seednodeip",children:[]},{value:"<code>-socketevents=&lt;mode&gt;</code>",id:"-socketeventsmode",children:[]},{value:"<code>-timeout=&lt;n&gt;</code>",id:"-timeoutn",children:[]},{value:"<code>-torcontrol=&lt;ip&gt;:&amp;lt;port&amp;gt;</code>",id:"-torcontrolipltportgt",children:[]},{value:"<code>-torpassword=&lt;pass&gt;</code>",id:"-torpasswordpass",children:[]},{value:"<code>-upnp</code>",id:"-upnp",children:[]},{value:"<code>-whitebind=&lt;addr&gt;</code>",id:"-whitebindaddr",children:[]},{value:"<code>-whitelist=&lt;IP address or network&gt;</code>",id:"-whitelistip-address-or-network",children:[]},{value:"<code>-maxuploadtarget=&lt;n&gt;</code>",id:"-maxuploadtargetn",children:[]}]},{value:"Wallet Options",id:"wallet-options",children:[{value:"<code>-disablewallet</code>",id:"-disablewallet",children:[]},{value:"<code>-keypool=&lt;n&gt;</code>",id:"-keypooln",children:[]},{value:"<code>-fallbackfee=&lt;amt&gt;</code>",id:"-fallbackfeeamt",children:[]},{value:"<code>-discardfee=&lt;amt&gt;</code>",id:"-discardfeeamt",children:[]},{value:"<code>-mintxfee=&lt;amt&gt;</code>",id:"-mintxfeeamt",children:[]},{value:"<code>-paytxfee=&lt;amt&gt;</code>",id:"-paytxfeeamt",children:[]},{value:"<code>-rescan</code>",id:"-rescan",children:[]},{value:"<code>-salvagewallet</code>",id:"-salvagewallet",children:[]},{value:"<code>-spendzeroconfchange</code>",id:"-spendzeroconfchange",children:[]},{value:"<code>-txconfirmtarget=&lt;n&gt;</code>",id:"-txconfirmtargetn",children:[]},{value:"<code>-usehd</code>",id:"-usehd",children:[]},{value:"<code>-mnemonic=&lt;text&gt;</code>",id:"-mnemonictext",children:[]},{value:"<code>-mnemonicpassphrase=&lt;text&gt;</code>",id:"-mnemonicpassphrasetext",children:[]},{value:"<code>-hdseed=&lt;hex&gt;</code>",id:"-hdseedhex",children:[]},{value:"<code>-upgradewallet</code>",id:"-upgradewallet",children:[]},{value:"<code>-wallet=&lt;path&gt;</code>",id:"-walletpath",children:[]},{value:"<code>-walletbroadcast</code>",id:"-walletbroadcast",children:[]},{value:"<code>-walletdir=&lt;dir&gt;</code>",id:"-walletdirdir",children:[]},{value:"<code>-walletnotify=&lt;cmd&gt;</code>",id:"-walletnotifycmd",children:[]},{value:"<code>-zapwallettxes=&lt;mode&gt;</code>",id:"-zapwallettxesmode",children:[]},{value:"<code>-createwalletbackups=&lt;n&gt;</code>",id:"-createwalletbackupsn",children:[]},{value:"<code>-walletbackupsdir=&lt;dir&gt;</code>",id:"-walletbackupsdirdir",children:[]},{value:"<code>-keepass</code>",id:"-keepass",children:[]},{value:"<code>-keepassport=&lt;port&gt;</code>",id:"-keepassportport",children:[]},{value:"<code>-keepasskey=&lt;key&gt;</code>",id:"-keepasskeykey",children:[]},{value:"<code>-keepassid=&lt;id&gt;</code>",id:"-keepassidid",children:[]},{value:"<code>-keepassname=&lt;name&gt;</code>",id:"-keepassnamename",children:[]}]},{value:"ZeroMQ Notification Options",id:"zeromq-notification-options",children:[{value:"<code>-zmqpubhashblock=&lt;address&gt;</code>",id:"-zmqpubhashblockaddress",children:[]},{value:"<code>-zmqpubhashtx=&lt;address&gt;</code>",id:"-zmqpubhashtxaddress",children:[]},{value:"<code>-zmqpubhashtxlock=&lt;address&gt;</code>",id:"-zmqpubhashtxlockaddress",children:[]},{value:"<code>-zmqpubhashgovernancevote=&lt;address&gt;</code>",id:"-zmqpubhashgovernancevoteaddress",children:[]},{value:"<code>-zmqpubhashgovernanceobject=&lt;address&gt;</code>",id:"-zmqpubhashgovernanceobjectaddress",children:[]},{value:"<code>-zmqpubhashinstantsenddoublespend=&lt;address&gt;</code>",id:"-zmqpubhashinstantsenddoublespendaddress",children:[]},{value:"<code>-zmqpubrawblock=&lt;address&gt;</code>",id:"-zmqpubrawblockaddress",children:[]},{value:"<code>-zmqpubrawtx=&lt;address&gt;</code>",id:"-zmqpubrawtxaddress",children:[]},{value:"<code>-zmqpubrawtxlock=&lt;address&gt;</code>",id:"-zmqpubrawtxlockaddress",children:[]},{value:"<code>-zmqpubrawinstantsenddoublespend=&lt;address&gt;</code>",id:"-zmqpubrawinstantsenddoublespendaddress",children:[]}]},{value:"Debugging / Testing Options",id:"debugging--testing-options",children:[{value:"<code>-uacomment=&lt;cmt&gt;</code>",id:"-uacommentcmt",children:[]},{value:"<code>-debug=&lt;category&gt;</code>",id:"-debugcategory",children:[]},{value:"<code>-debugexclude=&lt;category&gt;</code>",id:"-debugexcludecategory",children:[]},{value:"<code>-help-debug</code>",id:"-help-debug",children:[]},{value:"<code>-logips</code>",id:"-logips",children:[]},{value:"<code>-logtimestamps</code>",id:"-logtimestamps",children:[]},{value:"<code>-maxtxfee=&lt;amt&gt;</code>",id:"-maxtxfeeamt",children:[]},{value:"<code>-printtoconsole</code>",id:"-printtoconsole",children:[]},{value:"<code>-printtodebuglog</code>",id:"-printtodebuglog",children:[]},{value:"<code>-shrinkdebugfile</code>",id:"-shrinkdebugfile",children:[]}]},{value:"Chain Selection Options",id:"chain-selection-options",children:[{value:"<code>-testnet</code>",id:"-testnet",children:[]},{value:"<code>-devnet=&lt;name&gt;</code>",id:"-devnetname",children:[]},{value:"<code>-disablegovernance</code>",id:"-disablegovernance",children:[]},{value:"<code>-sporkaddr=&lt;pacaddress&gt;</code>",id:"-sporkaddrpacaddress",children:[]},{value:"<code>-minsporkkeys=&lt;n&gt;</code>",id:"-minsporkkeysn",children:[]}]},{value:"Masternode Options",id:"masternode-options",children:[{value:"<code>-masternodeblsprivkey=&lt;hex&gt;</code>",id:"-masternodeblsprivkeyhex",children:[]}]},{value:"InstantSend Options",id:"instantsend-options",children:[{value:"<code>-instantsendnotify=&lt;cmd&gt;</code>",id:"-instantsendnotifycmd",children:[]}]},{value:"Node Relay Options:",id:"node-relay-options",children:[{value:"<code>-bytespersigop</code>",id:"-bytespersigop",children:[]},{value:"<code>-datacarrier</code>",id:"-datacarrier",children:[]},{value:"<code>-datacarriersize</code>",id:"-datacarriersize",children:[]},{value:"<code>-minrelaytxfee=&lt;amt&gt;</code>",id:"-minrelaytxfeeamt",children:[]},{value:"<code>-whitelistrelay</code>",id:"-whitelistrelay",children:[]},{value:"<code>-whitelistforcerelay</code>",id:"-whitelistforcerelay",children:[]}]},{value:"Block Creation Options",id:"block-creation-options",children:[{value:"<code>-blockmintxfee=&lt;amt&gt;</code>",id:"-blockmintxfeeamt",children:[]}]}],u={toc:p};function h(e){var t=e.components,n=(0,i.Z)(e,d);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"daemon-options-pacprotocold"},"Daemon Options (pacprotocold)"),(0,o.kt)("p",null,"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocold [options]\n")),(0,o.kt)("p",null,"or using pacprotocol.conf (compatible with most options)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# pacprotocol.conf\n[options without "-"]\n\n# example\ndaemon=1 #from -daemon=1\nlisten=1 #from -listen=1\n')),(0,o.kt)(l.Z,{toc:p,mdxType:"TOCInline"}),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("h3",{id:"-"},(0,o.kt)("inlineCode",{parentName:"h3"},"-?")),(0,o.kt)("p",null,"Print this help message and exit"),(0,o.kt)("h3",{id:"-version"},(0,o.kt)("inlineCode",{parentName:"h3"},"-version")),(0,o.kt)("p",null,"Print version and exit"),(0,o.kt)("h3",{id:"-alertnotifycmd"},(0,o.kt)("inlineCode",{parentName:"h3"},"-alertnotify=<cmd>")),(0,o.kt)("p",null,"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)"),(0,o.kt)("p",null,"Example usage with bash script file of ",(0,o.kt)("inlineCode",{parentName:"p"},"alert.sh %s")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\ncurl -d "$1" http://localhost:1234/alert\n')),(0,o.kt)("p",null,"Running following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol -alertnotify="/alert.sh %s"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:1234/alert")," will be called when daemon alerted something."),(0,o.kt)("h3",{id:"-blocknotifycmd"},(0,o.kt)("inlineCode",{parentName:"h3"},"-blocknotify=<cmd>")),(0,o.kt)("p",null,"Execute command when the best block changes (%s in cmd is replaced by block hash)"),(0,o.kt)("p",null,"Example usage with bash script file of ",(0,o.kt)("inlineCode",{parentName:"p"},"block.sh %s")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\ncurl -d "$1" http://localhost:1234/block\n')),(0,o.kt)("p",null,"Running following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol -blocknotify="/block.sh %s"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:1234/block")," will be called when daemon has update on best block changes."),(0,o.kt)("h3",{id:"-conffile"},(0,o.kt)("inlineCode",{parentName:"h3"},"-conf=<file>")),(0,o.kt)("p",null,"Specify configuration file. Relative paths will be prefixed by datadir location. (default: pacprotocol.conf)"),(0,o.kt)("h3",{id:"-daemon"},(0,o.kt)("inlineCode",{parentName:"h3"},"-daemon")),(0,o.kt)("p",null,"Run in the background as a daemon and accept commands"),(0,o.kt)("h3",{id:"-datadirdir"},(0,o.kt)("inlineCode",{parentName:"h3"},"-datadir=<dir>")),(0,o.kt)("p",null,"Specify data directory"),(0,o.kt)("h3",{id:"-dbcachen"},(0,o.kt)("inlineCode",{parentName:"h3"},"-dbcache=<n>")),(0,o.kt)("p",null,"Set database cache size in megabytes (4 to 16384, default: 300)"),(0,o.kt)("h3",{id:"-debuglogfilefile"},(0,o.kt)("inlineCode",{parentName:"h3"},"-debuglogfile=<file>")),(0,o.kt)("p",null,"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: debug.log)"),(0,o.kt)("h3",{id:"-loadblockfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"-loadblock=<file>")),(0,o.kt)("p",null,"Imports blocks from external blk000??.dat file on startup"),(0,o.kt)("h3",{id:"-maxorphantxsizen"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxorphantxsize=<n>")),(0,o.kt)("p",null,"Maximum total size of all orphan transactions in megabytes (default: 10)"),(0,o.kt)("h3",{id:"-maxmempooln"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxmempool=<n>")),(0,o.kt)("p",null,"Keep the transaction memory pool below ","<","n",">"," megabytes (default: 300)"),(0,o.kt)("h3",{id:"-mempoolexpiryn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-mempoolexpiry=<n>")),(0,o.kt)("p",null,"Do not keep transactions in the mempool longer than ","<","n",">"," hours (default: 336)"),(0,o.kt)("h3",{id:"-persistmempool"},(0,o.kt)("inlineCode",{parentName:"h3"},"-persistmempool")),(0,o.kt)("p",null,"Whether to save the mempool on shutdown and load on restart (default: 1)"),(0,o.kt)("h3",{id:"-syncmempool"},(0,o.kt)("inlineCode",{parentName:"h3"},"-syncmempool")),(0,o.kt)("p",null,"Sync mempool from other nodes on start (default: 1)"),(0,o.kt)("h3",{id:"-blockreconstructionextratxnn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-blockreconstructionextratxn=<n>")),(0,o.kt)("p",null,"Extra transactions to keep in memory for compact block reconstructions (default: 100)"),(0,o.kt)("h3",{id:"-parn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-par=<n>")),(0,o.kt)("p",null,"Set the number of script verification threads (-4 to 16, 0 = auto, < 0 = leave that many cores free, default: 0)"),(0,o.kt)("h3",{id:"-pidfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"-pid=<file>")),(0,o.kt)("p",null,"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: dashd.pid)"),(0,o.kt)("h3",{id:"-prunen"},(0,o.kt)("inlineCode",{parentName:"h3"},"-prune=<n>")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, > 945 = automatically prune block files to stay under the specified target size in MiB)"))),(0,o.kt)("p",null,"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex, -rescan and -disablegovernance=false."),(0,o.kt)("h3",{id:"-reindex-chainstate"},(0,o.kt)("inlineCode",{parentName:"h3"},"-reindex-chainstate")),(0,o.kt)("p",null,"Rebuild chain state from the currently indexed blocks"),(0,o.kt)("h3",{id:"-reindex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-reindex")),(0,o.kt)("p",null,"Rebuild chain state and block index from the blk*.dat files on disk"),(0,o.kt)("h3",{id:"-sysperms"},(0,o.kt)("inlineCode",{parentName:"h3"},"-sysperms")),(0,o.kt)("p",null,"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)"),(0,o.kt)("h3",{id:"-txindex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-txindex")),(0,o.kt)("p",null,"Maintain a full transaction index, used by the getrawtransaction rpc call (default: 1)"),(0,o.kt)("h3",{id:"-addressindex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-addressindex")),(0,o.kt)("p",null,"Maintain a full address index, used to query for the balance, txids and unspent outputs for addresses (default: 0)"),(0,o.kt)("h3",{id:"-timestampindex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-timestampindex")),(0,o.kt)("p",null,"Maintain a timestamp index for block hashes, used to query blocks hashes by a range of timestamps (default: 0)"),(0,o.kt)("h3",{id:"-spentindex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-spentindex")),(0,o.kt)("p",null,"Maintain a full spent index, used to query the spending txid and input index for an outpoint (default: 0)"),(0,o.kt)("h2",{id:"rpc-server-options"},"RPC Server Options"),(0,o.kt)("h3",{id:"-server"},(0,o.kt)("inlineCode",{parentName:"h3"},"-server")),(0,o.kt)("p",null,"Accept command line and JSON-RPC commands"),(0,o.kt)("h3",{id:"-rest"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rest")),(0,o.kt)("p",null,"Accept public REST requests (default: 0)"),(0,o.kt)("h3",{id:"-rpcbindaddrport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcbind=<addr>[:port]")),(0,o.kt)("p",null,"Bind to given address to listen for JSON-RPC connections. This option is\nignored unless -rpcallowip is also passed. Port is optional and\noverrides -rpcport. Use ","[host]",":port notation for IPv6. This\noption can be specified multiple times (default: 127.0.0.1 and\n::1 i.e., localhost, or if -rpcallowip has been specified,\n0.0.0.0 and :: i.e., all addresses)"),(0,o.kt)("h3",{id:"-rpccookiefileloc"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpccookiefile=<loc>")),(0,o.kt)("p",null,"Location of the auth cookie. Relative paths will be prefixed by a\nnet-specific datadir location. (default: data dir)"),(0,o.kt)("h3",{id:"-rpcuseruser"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcuser=<user>")),(0,o.kt)("p",null,"Username for JSON-RPC connections"),(0,o.kt)("h3",{id:"-rpcpasswordpw"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcpassword=<pw>")),(0,o.kt)("p",null,"Password for JSON-RPC connections"),(0,o.kt)("h3",{id:"-rpcauthuserpw"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcauth=<userpw>")),(0,o.kt)("p",null,"Username and hashed password for JSON-RPC connections. The field\n","<","userpw",">"," comes in the format: ","<","USERNAME",">",":","<","SALT",">","$","<","HASH",">",". A\ncanonical python script is included in share/rpcuser. The client\nthen connects normally using the\nrpcuser=","<","USERNAME",">","/rpcpassword=","<","PASSWORD",">"," pair of arguments. This\noption can be specified multiple times"),(0,o.kt)("h3",{id:"-rpcportport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcport=<port>")),(0,o.kt)("p",null,"Listen for JSON-RPC connections on ","<","port",">"," (default: 9998 or testnet:\n19998)"),(0,o.kt)("h3",{id:"-rpcallowipip"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcallowip=<ip>")),(0,o.kt)("p",null,"Allow JSON-RPC connections from specified source. Valid for ","<","ip",">"," are a\nsingle IP (e.g. 1.2.3.4), a network/netmask (e.g.\n1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\noption can be specified multiple times"),(0,o.kt)("h3",{id:"-rpcthreadsn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rpcthreads=<n>")),(0,o.kt)("p",null,"Set the number of threads to service RPC calls (default: 4)"),(0,o.kt)("h2",{id:"connection-options"},"Connection Options"),(0,o.kt)("h3",{id:"-addnodeip"},(0,o.kt)("inlineCode",{parentName:"h3"},"-addnode=<ip>")),(0,o.kt)("p",null,"Add a node to connect to and attempt to keep the connection open (see the ",(0,o.kt)("inlineCode",{parentName:"p"},"addnode")," RPC command help for more info)"),(0,o.kt)("h3",{id:"-allowprivatenet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-allowprivatenet")),(0,o.kt)("p",null,"Allow RFC1918 addresses to be relayed and connected to (default: 0)"),(0,o.kt)("h3",{id:"-banscoren"},(0,o.kt)("inlineCode",{parentName:"h3"},"-banscore=<n>")),(0,o.kt)("p",null,"Threshold for disconnecting misbehaving peers (default: 100)"),(0,o.kt)("h3",{id:"-bantimen"},(0,o.kt)("inlineCode",{parentName:"h3"},"-bantime=<n>")),(0,o.kt)("p",null,"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)"),(0,o.kt)("h3",{id:"-bindaddr"},(0,o.kt)("inlineCode",{parentName:"h3"},"-bind=<addr>")),(0,o.kt)("p",null,"Bind to given address and always listen on it. Use ","[host]",":port notation for IPv6"),(0,o.kt)("h3",{id:"-connectip"},(0,o.kt)("inlineCode",{parentName:"h3"},"-connect=<ip>")),(0,o.kt)("p",null,"Connect only to the specified node(s); ### ",(0,o.kt)("inlineCode",{parentName:"p"},"-connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)")),(0,o.kt)("h3",{id:"-discover"},(0,o.kt)("inlineCode",{parentName:"h3"},"-discover")),(0,o.kt)("p",null,"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)"),(0,o.kt)("h3",{id:"-dns"},(0,o.kt)("inlineCode",{parentName:"h3"},"-dns")),(0,o.kt)("p",null,"Allow DNS lookups for -addnode, -seednode and -connect (default: 1)"),(0,o.kt)("h3",{id:"-dnsseed"},(0,o.kt)("inlineCode",{parentName:"h3"},"-dnsseed")),(0,o.kt)("p",null,"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)"),(0,o.kt)("h3",{id:"-enablebip61"},(0,o.kt)("inlineCode",{parentName:"h3"},"-enablebip61")),(0,o.kt)("p",null,"Send reject messages per BIP61 (default: 1)"),(0,o.kt)("h3",{id:"-externalipip"},(0,o.kt)("inlineCode",{parentName:"h3"},"-externalip=<ip>")),(0,o.kt)("p",null,"Specify your own public address"),(0,o.kt)("h3",{id:"-forcednsseed"},(0,o.kt)("inlineCode",{parentName:"h3"},"-forcednsseed")),(0,o.kt)("p",null,"Always query for peer addresses via DNS lookup (default: 0)"),(0,o.kt)("h3",{id:"-listen"},(0,o.kt)("inlineCode",{parentName:"h3"},"-listen")),(0,o.kt)("p",null,"Accept connections from outside (default: 1 if no -proxy or -connect)"),(0,o.kt)("h3",{id:"-listenonion"},(0,o.kt)("inlineCode",{parentName:"h3"},"-listenonion")),(0,o.kt)("p",null,"Automatically create Tor hidden service (default: 1)"),(0,o.kt)("h3",{id:"-maxconnectionsn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxconnections=<n>")),(0,o.kt)("p",null,"Maintain at most ","<","n",">"," connections to peers (temporary service connections excluded) (default: 125)"),(0,o.kt)("h3",{id:"-maxreceivebuffern"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxreceivebuffer=<n>")),(0,o.kt)("p",null,"Maximum per-connection receive buffer, ","<","n",">","*1000 bytes (default: 5000)"),(0,o.kt)("h3",{id:"-maxsendbuffern"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxsendbuffer=<n>")),(0,o.kt)("p",null,"Maximum per-connection send buffer, ","<","n",">","*1000 bytes (default: 1000)"),(0,o.kt)("h3",{id:"-maxtimeadjustment"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxtimeadjustment")),(0,o.kt)("p",null,"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: 4200 seconds)"),(0,o.kt)("h3",{id:"-onionipport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-onion=<ip:port>")),(0,o.kt)("p",null,"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)"),(0,o.kt)("h3",{id:"-onlynetnet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-onlynet=<net>")),(0,o.kt)("p",null,"Only connect to nodes in network ","<","net",">"," (ipv4, ipv6 or onion)"),(0,o.kt)("h3",{id:"-permitbaremultisig"},(0,o.kt)("inlineCode",{parentName:"h3"},"-permitbaremultisig")),(0,o.kt)("p",null,"Relay non-P2SH multisig (default: 1)"),(0,o.kt)("h3",{id:"-peerbloomfilters"},(0,o.kt)("inlineCode",{parentName:"h3"},"-peerbloomfilters")),(0,o.kt)("p",null,"Support filtering of blocks and transaction with bloom filters (default: 1)"),(0,o.kt)("h3",{id:"-portport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-port=<port>")),(0,o.kt)("p",null,"Listen for connections on ","<","port",">"," (default: 9999 or testnet: 19999)"),(0,o.kt)("h3",{id:"-proxyipport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-proxy=<ip:port>")),(0,o.kt)("p",null,"Connect through SOCKS5 proxy"),(0,o.kt)("h3",{id:"-proxyrandomize"},(0,o.kt)("inlineCode",{parentName:"h3"},"-proxyrandomize")),(0,o.kt)("p",null,"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: 1)"),(0,o.kt)("h3",{id:"-seednodeip"},(0,o.kt)("inlineCode",{parentName:"h3"},"-seednode=<ip>")),(0,o.kt)("p",null,"Connect to a node to retrieve peer addresses, and disconnect"),(0,o.kt)("h3",{id:"-socketeventsmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"-socketevents=<mode>")),(0,o.kt)("p",null,"Socket events mode, which must be one of: 'select', 'poll', 'epoll' (default: epoll)"),(0,o.kt)("h3",{id:"-timeoutn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-timeout=<n>")),(0,o.kt)("p",null,"Specify connection timeout in milliseconds (minimum: 1, default: 5000)"),(0,o.kt)("h3",{id:"-torcontrolipltportgt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-torcontrol=<ip>:&lt;port&gt;")),(0,o.kt)("p",null,"Tor control port to use if onion listening enabled (default:\n127.0.0.1:9051)"),(0,o.kt)("h3",{id:"-torpasswordpass"},(0,o.kt)("inlineCode",{parentName:"h3"},"-torpassword=<pass>")),(0,o.kt)("p",null,"Tor control port password (default: empty)"),(0,o.kt)("h3",{id:"-upnp"},(0,o.kt)("inlineCode",{parentName:"h3"},"-upnp")),(0,o.kt)("p",null,"Use UPnP to map the listening port (default: 0)"),(0,o.kt)("h3",{id:"-whitebindaddr"},(0,o.kt)("inlineCode",{parentName:"h3"},"-whitebind=<addr>")),(0,o.kt)("p",null,"Bind to given address and whitelist peers connecting to it. Use ","[host]",":port notation for IPv6"),(0,o.kt)("h3",{id:"-whitelistip-address-or-network"},(0,o.kt)("inlineCode",{parentName:"h3"},"-whitelist=<IP address or network>")),(0,o.kt)("p",null,"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times. Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway"),(0,o.kt)("h3",{id:"-maxuploadtargetn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxuploadtarget=<n>")),(0,o.kt)("p",null,"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: 0)"),(0,o.kt)("h2",{id:"wallet-options"},"Wallet Options"),(0,o.kt)("h3",{id:"-disablewallet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-disablewallet")),(0,o.kt)("p",null,"Do not load the wallet and disable wallet RPC calls"),(0,o.kt)("h3",{id:"-keypooln"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keypool=<n>")),(0,o.kt)("p",null,"Set key pool size to ","<","n",">"," (default: 1000)"),(0,o.kt)("h3",{id:"-fallbackfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-fallbackfee=<amt>")),(0,o.kt)("p",null,"A fee rate (in DASH/kB) that will be used when fee estimation has\ninsufficient data (default: 0.00001)"),(0,o.kt)("h3",{id:"-discardfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-discardfee=<amt>")),(0,o.kt)("p",null,"The fee rate (in DASH/kB) that indicates your tolerance for discarding\nchange by adding it to the fee (default: 0.0001). Note: An output\nis discarded if it is dust at this rate, but we will always\ndiscard up to the dust relay fee and a discard fee above that is\nlimited by the fee estimate for the longest target"),(0,o.kt)("h3",{id:"-mintxfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-mintxfee=<amt>")),(0,o.kt)("p",null,"Fees (in DASH/kB) smaller than this are considered zero fee for\ntransaction creation (default: 0.00001)"),(0,o.kt)("h3",{id:"-paytxfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-paytxfee=<amt>")),(0,o.kt)("p",null,"Fee (in DASH/kB) to add to transactions you send (default: 0.00)"),(0,o.kt)("h3",{id:"-rescan"},(0,o.kt)("inlineCode",{parentName:"h3"},"-rescan")),(0,o.kt)("p",null,"Rescan the block chain for missing wallet transactions on startup"),(0,o.kt)("h3",{id:"-salvagewallet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-salvagewallet")),(0,o.kt)("p",null,"Attempt to recover private keys from a corrupt wallet on startup"),(0,o.kt)("h3",{id:"-spendzeroconfchange"},(0,o.kt)("inlineCode",{parentName:"h3"},"-spendzeroconfchange")),(0,o.kt)("p",null,"Spend unconfirmed change when sending transactions (default: 1)"),(0,o.kt)("h3",{id:"-txconfirmtargetn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-txconfirmtarget=<n>")),(0,o.kt)("p",null,"If paytxfee is not set, include enough fee so transactions begin\nconfirmation on average within n blocks (default: 6)"),(0,o.kt)("h3",{id:"-usehd"},(0,o.kt)("inlineCode",{parentName:"h3"},"-usehd")),(0,o.kt)("p",null,"Use hierarchical deterministic key generation (HD) after BIP39/BIP44.\nOnly has effect during wallet creation/first start (default: 0)"),(0,o.kt)("h3",{id:"-mnemonictext"},(0,o.kt)("inlineCode",{parentName:"h3"},"-mnemonic=<text>")),(0,o.kt)("p",null,"User defined mnemonic for HD wallet (bip39). Only has effect during\nwallet creation/first start (default: randomly generated)"),(0,o.kt)("h3",{id:"-mnemonicpassphrasetext"},(0,o.kt)("inlineCode",{parentName:"h3"},"-mnemonicpassphrase=<text>")),(0,o.kt)("p",null,"User defined mnemonic passphrase for HD wallet (BIP39). Only has effect\nduring wallet creation/first start (default: empty string)"),(0,o.kt)("h3",{id:"-hdseedhex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-hdseed=<hex>")),(0,o.kt)("p",null,"User defined seed for HD wallet (should be in hex). Only has effect\nduring wallet creation/first start (default: randomly generated)"),(0,o.kt)("h3",{id:"-upgradewallet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-upgradewallet")),(0,o.kt)("p",null,"Upgrade wallet to latest format on startup"),(0,o.kt)("h3",{id:"-walletpath"},(0,o.kt)("inlineCode",{parentName:"h3"},"-wallet=<path>")),(0,o.kt)("p",null,"Specify wallet database path. Can be specified multiple times to load\nmultiple wallets. Path is interpreted relative to ","<","walletdir",">"," if\nit is not absolute, and will be created if it does not exist (as\na directory containing a wallet.dat file and log files). For\nbackwards compatibility this will also accept names of existing\ndata files in ","<","walletdir",">",".)"),(0,o.kt)("h3",{id:"-walletbroadcast"},(0,o.kt)("inlineCode",{parentName:"h3"},"-walletbroadcast")),(0,o.kt)("p",null,"Make the wallet broadcast transactions (default: 1)"),(0,o.kt)("h3",{id:"-walletdirdir"},(0,o.kt)("inlineCode",{parentName:"h3"},"-walletdir=<dir>")),(0,o.kt)("p",null,"Specify directory to hold wallets (default: ","<","datadir",">","/wallets if it\nexists, otherwise ","<","datadir",">",")"),(0,o.kt)("h3",{id:"-walletnotifycmd"},(0,o.kt)("inlineCode",{parentName:"h3"},"-walletnotify=<cmd>")),(0,o.kt)("p",null,"Execute command when a wallet transaction changes (%s in cmd is replaced\nby TxID)"),(0,o.kt)("p",null,"Example usage with bash script file of ",(0,o.kt)("inlineCode",{parentName:"p"},"wallet.sh %s")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\ncurl -d "$1" http://localhost:1234/wallet\n')),(0,o.kt)("p",null,"Running following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol -walletnotify="/wallet.sh %s"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:1234/wallet")," will be called when daemon has update on wallet."),(0,o.kt)("h3",{id:"-zapwallettxesmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zapwallettxes=<mode>")),(0,o.kt)("p",null,"Delete all wallet transactions and only recover those parts of the\nblockchain through -rescan on startup (1 = keep tx meta data e.g.\naccount owner and payment request information, 2 = drop tx meta\ndata)"),(0,o.kt)("h3",{id:"-createwalletbackupsn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-createwalletbackups=<n>")),(0,o.kt)("p",null,"Number of automatic wallet backups (default: 10)"),(0,o.kt)("h3",{id:"-walletbackupsdirdir"},(0,o.kt)("inlineCode",{parentName:"h3"},"-walletbackupsdir=<dir>")),(0,o.kt)("p",null,"Specify full path to directory for automatic wallet backups (must exist)"),(0,o.kt)("h3",{id:"-keepass"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keepass")),(0,o.kt)("p",null,"Use KeePass 2 integration using KeePassHttp plugin (default: 0)"),(0,o.kt)("h3",{id:"-keepassportport"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keepassport=<port>")),(0,o.kt)("p",null,"Connect to KeePassHttp on port ","<","port",">"," (default: 19455)"),(0,o.kt)("h3",{id:"-keepasskeykey"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keepasskey=<key>")),(0,o.kt)("p",null,"KeePassHttp key for AES encrypted communication with KeePass"),(0,o.kt)("h3",{id:"-keepassidid"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keepassid=<id>")),(0,o.kt)("p",null,"KeePassHttp id for the established association"),(0,o.kt)("h3",{id:"-keepassnamename"},(0,o.kt)("inlineCode",{parentName:"h3"},"-keepassname=<name>")),(0,o.kt)("p",null,"Name to construct url for KeePass entry that stores the wallet\npassphrase"),(0,o.kt)("h2",{id:"zeromq-notification-options"},"ZeroMQ Notification Options"),(0,o.kt)("h3",{id:"-zmqpubhashblockaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashblock=<address>")),(0,o.kt)("p",null,"Enable publish hash block in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubhashtxaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashtx=<address>")),(0,o.kt)("p",null,"Enable publish hash transaction in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubhashtxlockaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashtxlock=<address>")),(0,o.kt)("p",null,"Enable publish hash transaction (locked via InstantSend) in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubhashgovernancevoteaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashgovernancevote=<address>")),(0,o.kt)("p",null,"Enable publish hash of governance votes in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubhashgovernanceobjectaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashgovernanceobject=<address>")),(0,o.kt)("p",null,"Enable publish hash of governance objects (like proposals) in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubhashinstantsenddoublespendaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubhashinstantsenddoublespend=<address>")),(0,o.kt)("p",null,"Enable publish transaction hashes of attempted InstantSend double spend\nin ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubrawblockaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubrawblock=<address>")),(0,o.kt)("p",null,"Enable publish raw block in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubrawtxaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubrawtx=<address>")),(0,o.kt)("p",null,"Enable publish raw transaction in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubrawtxlockaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubrawtxlock=<address>")),(0,o.kt)("p",null,"Enable publish raw transaction (locked via InstantSend) in ","<","address",">"),(0,o.kt)("h3",{id:"-zmqpubrawinstantsenddoublespendaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-zmqpubrawinstantsenddoublespend=<address>")),(0,o.kt)("p",null,"Enable publish raw transactions of attempted InstantSend double spend in ","<","address",">"),(0,o.kt)("h2",{id:"debugging--testing-options"},"Debugging / Testing Options"),(0,o.kt)("h3",{id:"-uacommentcmt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-uacomment=<cmt>")),(0,o.kt)("p",null,"Append comment to the user agent string"),(0,o.kt)("h3",{id:"-debugcategory"},(0,o.kt)("inlineCode",{parentName:"h3"},"-debug=<category>")),(0,o.kt)("p",null,"Output debugging information (default: 0, supplying ","<","category",">"," is\noptional). If ","<","category",">"," is not supplied or if ","<","category",">"," = 1,\noutput all debugging information. ","<","category",">"," can be: net, tor,\nmempool, http, bench, zmq, db, rpc, estimatefee, addrman,\nselectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,\nlibevent, coindb, qt, leveldb, chainlocks, gobject, instantsend,\nkeepass, llmq, llmq-dkg, llmq-sigs, mnpayments, mnsync,\nprivatesend, spork, netconn."),(0,o.kt)("h3",{id:"-debugexcludecategory"},(0,o.kt)("inlineCode",{parentName:"h3"},"-debugexclude=<category>")),(0,o.kt)("p",null,"Exclude debugging information for a category. Can be used in conjunction\nwith -debug=1 to output debug logs for all categories except one\nor more specified categories."),(0,o.kt)("h3",{id:"-help-debug"},(0,o.kt)("inlineCode",{parentName:"h3"},"-help-debug")),(0,o.kt)("p",null,"Show all debugging options (usage: --help -help-debug)"),(0,o.kt)("h3",{id:"-logips"},(0,o.kt)("inlineCode",{parentName:"h3"},"-logips")),(0,o.kt)("p",null,"Include IP addresses in debug output (default: 0)"),(0,o.kt)("h3",{id:"-logtimestamps"},(0,o.kt)("inlineCode",{parentName:"h3"},"-logtimestamps")),(0,o.kt)("p",null,"Prepend debug output with timestamp (default: 1)"),(0,o.kt)("h3",{id:"-maxtxfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-maxtxfee=<amt>")),(0,o.kt)("p",null,"Maximum total fees (in DASH) to use in a single wallet transaction or\nraw transaction; setting this too low may abort large\ntransactions (default: 0.10)"),(0,o.kt)("h3",{id:"-printtoconsole"},(0,o.kt)("inlineCode",{parentName:"h3"},"-printtoconsole")),(0,o.kt)("p",null,"Send trace/debug info to console instead of debug.log file"),(0,o.kt)("h3",{id:"-printtodebuglog"},(0,o.kt)("inlineCode",{parentName:"h3"},"-printtodebuglog")),(0,o.kt)("p",null,"Send trace/debug info to debug.log file (default: 1)"),(0,o.kt)("h3",{id:"-shrinkdebugfile"},(0,o.kt)("inlineCode",{parentName:"h3"},"-shrinkdebugfile")),(0,o.kt)("p",null,"Shrink debug.log file on client startup (default: 1 when no -debug)"),(0,o.kt)("h2",{id:"chain-selection-options"},"Chain Selection Options"),(0,o.kt)("h3",{id:"-testnet"},(0,o.kt)("inlineCode",{parentName:"h3"},"-testnet")),(0,o.kt)("p",null,"Use the test chain"),(0,o.kt)("h3",{id:"-devnetname"},(0,o.kt)("inlineCode",{parentName:"h3"},"-devnet=<name>")),(0,o.kt)("p",null,"Use devnet chain with provided name"),(0,o.kt)("h3",{id:"-disablegovernance"},(0,o.kt)("inlineCode",{parentName:"h3"},"-disablegovernance")),(0,o.kt)("p",null,"Disable governance validation (0-1, default: 0)"),(0,o.kt)("h3",{id:"-sporkaddrpacaddress"},(0,o.kt)("inlineCode",{parentName:"h3"},"-sporkaddr=<pacaddress>")),(0,o.kt)("p",null,"Override spork address. Only useful for regtest and devnet. Using this\non mainnet or testnet will ban you."),(0,o.kt)("h3",{id:"-minsporkkeysn"},(0,o.kt)("inlineCode",{parentName:"h3"},"-minsporkkeys=<n>")),(0,o.kt)("p",null,"Overrides minimum spork signers to change spork value. Only useful for\nregtest and devnet. Using this on mainnet or testnet will ban\nyou."),(0,o.kt)("h2",{id:"masternode-options"},"Masternode Options"),(0,o.kt)("h3",{id:"-masternodeblsprivkeyhex"},(0,o.kt)("inlineCode",{parentName:"h3"},"-masternodeblsprivkey=<hex>")),(0,o.kt)("p",null,"Set the masternode BLS private key and enable the client to act as a\nmasternode"),(0,o.kt)("h2",{id:"instantsend-options"},"InstantSend Options"),(0,o.kt)("h3",{id:"-instantsendnotifycmd"},(0,o.kt)("inlineCode",{parentName:"h3"},"-instantsendnotify=<cmd>")),(0,o.kt)("p",null,"Execute command when a wallet InstantSend transaction is successfully\nlocked (%s in cmd is replaced by TxID)"),(0,o.kt)("p",null,"Example usage with bash script file of ",(0,o.kt)("inlineCode",{parentName:"p"},"instant.sh %s")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\ncurl -d "$1" http://localhost:1234/instant\n')),(0,o.kt)("p",null,"Running following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol -instantsendnotify="/instant.sh %s"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:1234/instant")," will be called when daemon has update on instant."),(0,o.kt)("h2",{id:"node-relay-options"},"Node Relay Options:"),(0,o.kt)("h3",{id:"-bytespersigop"},(0,o.kt)("inlineCode",{parentName:"h3"},"-bytespersigop")),(0,o.kt)("p",null,"Minimum bytes per sigop in transactions we relay and mine (default: 20)"),(0,o.kt)("h3",{id:"-datacarrier"},(0,o.kt)("inlineCode",{parentName:"h3"},"-datacarrier")),(0,o.kt)("p",null,"Relay and mine data carrier transactions (default: 1)"),(0,o.kt)("h3",{id:"-datacarriersize"},(0,o.kt)("inlineCode",{parentName:"h3"},"-datacarriersize")),(0,o.kt)("p",null,"Maximum size of data in data carrier transactions we relay and mine\n(default: 83)"),(0,o.kt)("h3",{id:"-minrelaytxfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-minrelaytxfee=<amt>")),(0,o.kt)("p",null,"Fees (in DASH/kB) smaller than this are considered zero fee for\nrelaying, mining and transaction creation (default: 0.00001)"),(0,o.kt)("h3",{id:"-whitelistrelay"},(0,o.kt)("inlineCode",{parentName:"h3"},"-whitelistrelay")),(0,o.kt)("p",null,"Accept relayed transactions received from whitelisted peers even when\nnot relaying transactions (default: 1)"),(0,o.kt)("h3",{id:"-whitelistforcerelay"},(0,o.kt)("inlineCode",{parentName:"h3"},"-whitelistforcerelay")),(0,o.kt)("p",null,"Force relay of transactions from whitelisted peers even if they violate\nlocal relay policy (default: 1)"),(0,o.kt)("h2",{id:"block-creation-options"},"Block Creation Options"),(0,o.kt)("p",null,"-blockmaxsize=","<","n",">","\nSet maximum block size in bytes (default: 2000000)"),(0,o.kt)("h3",{id:"-blockmintxfeeamt"},(0,o.kt)("inlineCode",{parentName:"h3"},"-blockmintxfee=<amt>")),(0,o.kt)("p",null,"Set lowest fee rate (in DASH/kB) for transactions to be included in\nblock creation. (default: 0.00001)"))}h.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:function(){return i}})}}]);