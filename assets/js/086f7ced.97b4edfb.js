(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[5305],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return m},kt:function(){return d}});var o=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function u(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=o.createContext({}),s=function(e){var r=o.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},m=function(e){var r=s(e.components);return o.createElement(i.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},p=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),p=s(n),d=t,f=p["".concat(i,".").concat(d)]||p[d]||l[d]||a;return n?o.createElement(f,c(c({ref:r},m),{},{components:n})):o.createElement(f,c({ref:r},m))}));function d(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,c=new Array(a);c[0]=p;var u={};for(var i in r)hasOwnProperty.call(r,i)&&(u[i]=r[i]);u.originalType=e,u.mdxType="string"==typeof e?e:t,c[1]=u;for(var s=2;s<a;s++)c[s]=n[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2679:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return m},default:function(){return p}});var o=n(2122),t=n(9756),a=(n(7294),n(3905)),c=["components"],u={sidebar_position:118},i="quorum",s={unversionedId:"developers/pac-protocol-core/client-commands/quorum",id:"developers/pac-protocol-core/client-commands/quorum",isDocsHomePage:!1,title:"quorum",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/quorum.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/quorum",permalink:"/developers/pac-protocol-core/client-commands/quorum",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/quorum.mdx",version:"current",sidebarPosition:118,frontMatter:{sidebar_position:118},sidebar:"coreSidebar",previous:{title:"pruneblockchain",permalink:"/developers/pac-protocol-core/client-commands/pruneblockchain"},next:{title:"removeprunedfunds",permalink:"/developers/pac-protocol-core/client-commands/removeprunedfunds"}},m=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>command</code> <span class='asterisk'>*</span>",id:"command-",children:[]}]}],l={toc:m};function p(e){var r=e.components,n=(0,t.Z)(e,c);return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quorum"},"quorum"),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli quorum "command" ...\n')),(0,a.kt)("p",null,'quorum "command" ...\nSet of commands for quorums/LLMQs.\nTo get help on individual commands, use "help quorum command".'),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"command-"},(0,a.kt)("inlineCode",{parentName:"h3"},"command")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The command to execute"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help quorum\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'quorum "command" ...\nSet of commands for quorums/LLMQs.\nTo get help on individual commands, use "help quorum command".\n\nArguments:\n1. "command"        (string, required) The command to execute\n\nAvailable commands:\n  list              - List of on-chain quorums\n  info              - Return information about a quorum\n  dkgsimerror       - Simulates DKG errors and malicious behavior\n  dkgstatus         - Return the status of the current DKG process\n  memberof          - Checks which quorums the given masternode is a member of\n  sign              - Threshold-sign a message\n  verify            - Test if a quorum signature is valid for a request id and a message hash\n  hasrecsig         - Test if a valid recovered signature is present\n  getrecsig         - Get a recovered signature\n  isconflicting     - Test if a conflict exists\n  selectquorum      - Return the quorum that would/should sign a request\n  getdata           - Request quorum data from other masternodes in the quorum\n\n')))}p.isMDXComponent=!0}}]);