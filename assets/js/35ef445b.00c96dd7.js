(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6667],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return i},kt:function(){return u}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),d=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},i=function(e){var r=d(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),m=d(t),u=o,k=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return t?n.createElement(k,s(s({ref:r},i),{},{components:t})):n.createElement(k,s({ref:r},i))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var d=2;d<a;d++)s[d]=t[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3785:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return i}});var n=t(2122),o=t(9756),a=(t(7294),t(3905)),s={sidebar_position:66},c={unversionedId:"core/developers/pac-protocol-core/client-commands/generatetoaddress",id:"core/developers/pac-protocol-core/client-commands/generatetoaddress",isDocsHomePage:!1,title:"generatetoaddress",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/generatetoaddress.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/generatetoaddress",permalink:"/docs/core/developers/pac-protocol-core/client-commands/generatetoaddress",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/generatetoaddress.mdx",version:"current",sidebarPosition:66,frontMatter:{sidebar_position:66},sidebar:"coreSidebar",previous:{title:"generate",permalink:"/docs/core/developers/pac-protocol-core/client-commands/generate"},next:{title:"getblocktemplate",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getblocktemplate"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>nblocks</code> <span class='asterisk'>*</span>",id:"nblocks-",children:[]},{value:"<code>address</code> <span class='asterisk'>*</span>",id:"address-",children:[]},{value:"<code>maxtries</code>",id:"maxtries",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],d={toc:l};function i(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli generatetoaddress nblocks address (maxtries)\n")),(0,a.kt)("p",null,"Mine blocks immediately to a specified address (before the RPC call returns)"),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"nblocks-"},(0,a.kt)("inlineCode",{parentName:"h3"},"nblocks")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(numeric, required)")),(0,a.kt)("p",null,"How many blocks are generated immediately."),(0,a.kt)("h3",{id:"address-"},(0,a.kt)("inlineCode",{parentName:"h3"},"address")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The address to send the newly generated PACGlobal to."),(0,a.kt)("h3",{id:"maxtries"},(0,a.kt)("inlineCode",{parentName:"h3"},"maxtries")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(numeric, optional)")),(0,a.kt)("p",null,"How many iterations to try (default = 1000000)."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Generate 11 blocks to myaddress"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli generatetoaddress 11 "myaddress"\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"[ blockhashes ]     #(array) hashes of blocks generated\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help generatetoaddress\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'generatetoaddress nblocks address (maxtries)\n\nMine blocks immediately to a specified address (before the RPC call returns)\n\nArguments:\n1. nblocks      (numeric, required) How many blocks are generated immediately.\n2. address      (string, required) The address to send the newly generated PACGlobal to.\n3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\n\nResult:\n[ blockhashes ]     (array) hashes of blocks generated\n\nExamples:\n\nGenerate 11 blocks to myaddress\n> pacglobal-cli generatetoaddress 11 "myaddress"\n\n')))}i.isMDXComponent=!0}}]);