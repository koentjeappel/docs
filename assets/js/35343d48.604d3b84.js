(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6581],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return x},kt:function(){return p}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},x=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,x=c(e,["components","mdxType","originalType","parentName"]),m=s(t),p=r,d=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return t?a.createElement(d,i(i({ref:n},x),{},{components:t})):a.createElement(d,i({ref:n},x))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9177:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),i=["components"],c={sidebar_position:81},l={unversionedId:"pac-protocol-core/client-commands/getwalletinfo",id:"pac-protocol-core/client-commands/getwalletinfo",isDocsHomePage:!1,title:"getwalletinfo",description:"Command",source:"@site/docs/pac-protocol-core/client-commands/getwalletinfo.mdx",sourceDirName:"pac-protocol-core/client-commands",slug:"/pac-protocol-core/client-commands/getwalletinfo",permalink:"/pac-protocol-core/client-commands/getwalletinfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/pac-protocol-core/client-commands/getwalletinfo.mdx",version:"current",sidebarPosition:81,frontMatter:{sidebar_position:81},sidebar:"coreSidebar",previous:{title:"getunconfirmedbalance",permalink:"/pac-protocol-core/client-commands/getunconfirmedbalance"},next:{title:"getzmqnotifications",permalink:"/pac-protocol-core/client-commands/getzmqnotifications"}},s=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],x={toc:s};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getwalletinfo\n")),(0,o.kt)("p",null,"getwalletinfo\nReturns an object containing various wallet state info."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getwalletinfo \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "walletname": xxxxx,             #(string) the wallet name\n  "walletversion": xxxxx,     #(numeric) the wallet version\n  "balance": xxxxxxx,         #(numeric) the total confirmed balance of the wallet in PAC\n  "coinjoin_balance": xxxxxx, #(numeric) the CoinJoin balance in PAC\n  "unconfirmed_balance": xxx, #(numeric) the total unconfirmed balance of the wallet in PAC\n  "immature_balance": xxxxxx, #(numeric) the total immature balance of the wallet in PAC\n  "txcount": xxxxxxx,         #(numeric) the total number of transactions in the wallet\n  "timefirstkey": xxxxxx,     #(numeric) the timestamp #(seconds since Unix epoch) of the oldest known key in the wallet\n  "keypoololdest": xxxxxx,    #(numeric) the timestamp #(seconds since Unix epoch) of the oldest pre-generated key in the key pool\n  "keypoolsize": xxxx,        #(numeric) how many new keys are pre-generated #(only counts external keys)\n  "keypoolsize_hd_internal": xxxx, #(numeric) how many new keys are pre-generated for internal use #(used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\n  "keys_left": xxxx,          #(numeric) how many new keys are left since last automatic backup\n  "unlocked_until": ttt,      #(numeric) the timestamp in seconds since epoch #(midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  "paytxfee": x.xxxx,         #(numeric) the transaction fee configuration, set in PAC/kB\n  "hdchainid": "&lt;hash&gt;",      #(string) the ID of the HD chain\n  "hdaccountcount": xxx,      #(numeric) how many accounts of the HD chain are in this wallet\n    [\n      {\n      "hdaccountindex": xxx,         #(numeric) the index of the account\n      "hdexternalkeyindex": xxxx,    #(numeric) current external childkey index\n      "hdinternalkeyindex": xxxx,    #(numeric) current internal childkey index\n      }\n      ,...\n    ]\n  "scanning":                        #(json object) current scanning details, or false if no scan is in progress\n    {\n      "duration" : xxxx              #(numeric) elapsed seconds since scan start\n      "progress" : x.xxxx,           #(numeric) scanning progress percentage [0.0, 1.0]\n    }\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getwalletinfo\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'getwalletinfo\nReturns an object containing various wallet state info.\n\nResult:\n{\n  "walletname": xxxxx,             (string) the wallet name\n  "walletversion": xxxxx,     (numeric) the wallet version\n  "balance": xxxxxxx,         (numeric) the total confirmed balance of the wallet in PAC\n  "coinjoin_balance": xxxxxx, (numeric) the CoinJoin balance in PAC\n  "unconfirmed_balance": xxx, (numeric) the total unconfirmed balance of the wallet in PAC\n  "immature_balance": xxxxxx, (numeric) the total immature balance of the wallet in PAC\n  "txcount": xxxxxxx,         (numeric) the total number of transactions in the wallet\n  "timefirstkey": xxxxxx,     (numeric) the timestamp (seconds since Unix epoch) of the oldest known key in the wallet\n  "keypoololdest": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\n  "keypoolsize": xxxx,        (numeric) how many new keys are pre-generated (only counts external keys)\n  "keypoolsize_hd_internal": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\n  "keys_left": xxxx,          (numeric) how many new keys are left since last automatic backup\n  "unlocked_until": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  "paytxfee": x.xxxx,         (numeric) the transaction fee configuration, set in PAC/kB\n  "hdchainid": "<hash>",      (string) the ID of the HD chain\n  "hdaccountcount": xxx,      (numeric) how many accounts of the HD chain are in this wallet\n    [\n      {\n      "hdaccountindex": xxx,         (numeric) the index of the account\n      "hdexternalkeyindex": xxxx,    (numeric) current external childkey index\n      "hdinternalkeyindex": xxxx,    (numeric) current internal childkey index\n      }\n      ,...\n    ]\n  "scanning":                        (json object) current scanning details, or false if no scan is in progress\n    {\n      "duration" : xxxx              (numeric) elapsed seconds since scan start\n      "progress" : x.xxxx,           (numeric) scanning progress percentage [0.0, 1.0]\n    }\n}\n\nExamples:\n> pacprotocol-cli getwalletinfo \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getwalletinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);