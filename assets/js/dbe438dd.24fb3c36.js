(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[1317],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),m=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},s=function(e){var n=m(e.components);return t.createElement(i.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=m(r),d=o,f=p["".concat(i,".").concat(d)]||p[d]||l[d]||a;return r?t.createElement(f,c(c({ref:n},s),{},{components:r})):t.createElement(f,c({ref:n},s))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,c[1]=u;for(var m=2;m<a;m++)c[m]=r[m];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4822:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return u},metadata:function(){return i},toc:function(){return m},default:function(){return l}});var t=r(2122),o=r(9756),a=(r(7294),r(3905)),c=["components"],u={sidebar_position:118},i={unversionedId:"pac-protocol-core/client-commands/quorum",id:"pac-protocol-core/client-commands/quorum",isDocsHomePage:!1,title:"quorum",description:"Command",source:"@site/docs/pac-protocol-core/client-commands/quorum.mdx",sourceDirName:"pac-protocol-core/client-commands",slug:"/pac-protocol-core/client-commands/quorum",permalink:"/pac-protocol-core/client-commands/quorum",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/pac-protocol-core/client-commands/quorum.mdx",version:"current",sidebarPosition:118,frontMatter:{sidebar_position:118},sidebar:"coreSidebar",previous:{title:"pruneblockchain",permalink:"/pac-protocol-core/client-commands/pruneblockchain"},next:{title:"removeprunedfunds",permalink:"/pac-protocol-core/client-commands/removeprunedfunds"}},m=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>command</code> <span class='asterisk'>*</span>",id:"command-",children:[]}]}],s={toc:m};function l(e){var n=e.components,r=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli quorum "command" ...\n')),(0,a.kt)("p",null,'quorum "command" ...\nSet of commands for quorums/LLMQs.\nTo get help on individual commands, use "help quorum command".'),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"command-"},(0,a.kt)("inlineCode",{parentName:"h3"},"command")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, required)")),(0,a.kt)("p",null,"The command to execute"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help quorum\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'quorum "command" ...\nSet of commands for quorums/LLMQs.\nTo get help on individual commands, use "help quorum command".\n\nArguments:\n1. "command"        (string, required) The command to execute\n\nAvailable commands:\n  list              - List of on-chain quorums\n  info              - Return information about a quorum\n  dkgsimerror       - Simulates DKG errors and malicious behavior\n  dkgstatus         - Return the status of the current DKG process\n  memberof          - Checks which quorums the given masternode is a member of\n  sign              - Threshold-sign a message\n  verify            - Test if a quorum signature is valid for a request id and a message hash\n  hasrecsig         - Test if a valid recovered signature is present\n  getrecsig         - Get a recovered signature\n  isconflicting     - Test if a conflict exists\n  selectquorum      - Return the quorum that would/should sign a request\n  getdata           - Request quorum data from other masternodes in the quorum\n\n')))}l.isMDXComponent=!0}}]);