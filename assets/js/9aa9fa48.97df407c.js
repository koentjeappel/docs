(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8467],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return g},kt:function(){return u}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return t?o.createElement(m,l(l({ref:n},g),{},{components:t})):o.createElement(m,l({ref:n},g))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},339:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return g},default:function(){return p}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),l=["components"],i={sidebar_position:108},c="logging",s={unversionedId:"developers/pac-protocol-core/client-commands/logging",id:"developers/pac-protocol-core/client-commands/logging",isDocsHomePage:!1,title:"logging",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/logging.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/logging",permalink:"/developers/pac-protocol-core/client-commands/logging",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/developers/pac-protocol-core/client-commands/logging.mdx",version:"current",sidebarPosition:108,frontMatter:{sidebar_position:108},sidebar:"coreSidebar",previous:{title:"lockunspent",permalink:"/developers/pac-protocol-core/client-commands/lockunspent"},next:{title:"masternode",permalink:"/developers/pac-protocol-core/client-commands/masternode"}},g=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>include</code>",id:"include",children:[]},{value:"<code>exclude</code>",id:"exclude",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],d={toc:g};function p(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logging"},"logging"),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli logging ( <include> <exclude> )\n")),(0,a.kt)("p",null,"logging ( ","<","include",">"," ","<","exclude",">",' )\nGets and sets the logging configuration.\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\nThe arguments are evaluated in order "include", "exclude".\nIf an item is both included and excluded, it will thus end up being excluded.\nThe valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb, chainlocks, gobject, instantsend, keepass, llmq, llmq-dkg, llmq-sigs, mnpayments, mnsync, coinjoin, spork, netconn\nIn addition, the following are available as category names with special meanings:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'"all",  "1" : represent all logging categories.'),(0,a.kt)("li",{parentName:"ul"},'"pacprotocol" activates all PAC Protocol-specific categories at once.\nTo deactivate all categories at once you can specify "all" in ',"<","exclude",">","."),(0,a.kt)("li",{parentName:"ul"},'"none", "0" : even if other logging categories are specified, ignore all of them.')),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"include"},(0,a.kt)("inlineCode",{parentName:"h3"},"include")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(array of strings, optional)")),(0,a.kt)("p",null,"A json array of categories to add debug logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n     "category"   (string) the valid logging category\n     ,...\n]\n')),(0,a.kt)("h3",{id:"exclude"},(0,a.kt)("inlineCode",{parentName:"h3"},"exclude")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(array of strings, optional)")),(0,a.kt)("p",null,"A json array of categories to remove debug logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n     "category"   (string) the valid logging category\n     ,...\n]\n')),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli logging "[\\"all\\"]" "[\\"http\\"]"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "logging", "params": [["all"], "[libevent]"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{                   #(json object where keys are the logging categories, and values indicates its status\n  "category": 0|1,  #(numeric) if being debug logged or not. 0:inactive, 1:active\n  ...\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help logging\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'logging ( <include> <exclude> )\nGets and sets the logging configuration.\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\nThe arguments are evaluated in order "include", "exclude".\nIf an item is both included and excluded, it will thus end up being excluded.\nThe valid logging categories are: net, tor, mempool, http, bench, zmq, db, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb, chainlocks, gobject, instantsend, keepass, llmq, llmq-dkg, llmq-sigs, mnpayments, mnsync, coinjoin, spork, netconn\nIn addition, the following are available as category names with special meanings:\n  - "all",  "1" : represent all logging categories.\n  - "pacprotocol" activates all PAC Protocol-specific categories at once.\nTo deactivate all categories at once you can specify "all" in <exclude>.\n  - "none", "0" : even if other logging categories are specified, ignore all of them.\n\nArguments:\n1. "include"        (array of strings, optional) A json array of categories to add debug logging\n     [\n       "category"   (string) the valid logging category\n       ,...\n     ]\n2. "exclude"        (array of strings, optional) A json array of categories to remove debug logging\n     [\n       "category"   (string) the valid logging category\n       ,...\n     ]\n\nResult:\n{                   (json object where keys are the logging categories, and values indicates its status\n  "category": 0|1,  (numeric) if being debug logged or not. 0:inactive, 1:active\n  ...\n}\n\nExamples:\n> pacprotocol-cli logging "[\\"all\\"]" "[\\"http\\"]"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "logging", "params": [["all"], "[libevent]"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);