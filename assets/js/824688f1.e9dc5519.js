(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8283],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=o.createContext({}),s=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=s(t.components);return o.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,l=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:e},p),{},{components:n})):o.createElement(h,i({ref:e},p))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5175:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:78},l={unversionedId:"pac-protocol-core/client-commands/gettxoutproof",id:"pac-protocol-core/client-commands/gettxoutproof",isDocsHomePage:!1,title:"gettxoutproof",description:"Command",source:"@site/docs/pac-protocol-core/client-commands/gettxoutproof.mdx",sourceDirName:"pac-protocol-core/client-commands",slug:"/pac-protocol-core/client-commands/gettxoutproof",permalink:"/pac-protocol-core/client-commands/gettxoutproof",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/pac-protocol-core/client-commands/gettxoutproof.mdx",version:"current",sidebarPosition:78,frontMatter:{sidebar_position:78},sidebar:"coreSidebar",previous:{title:"gettxout",permalink:"/pac-protocol-core/client-commands/gettxout"},next:{title:"gettxoutsetinfo",permalink:"/pac-protocol-core/client-commands/gettxoutsetinfo"}},s=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>txids</code>",id:"txids",children:[]},{value:"<code>blockhash</code>",id:"blockhash",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],p={toc:s};function u(t){var e=t.components,n=(0,r.Z)(t,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli gettxoutproof ["txid",...] ( blockhash )\n')),(0,a.kt)("p",null,'Returns a hex-encoded proof that "txid" was included in a block.'),(0,a.kt)("p",null,"NOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash)."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"txids"},(0,a.kt)("inlineCode",{parentName:"h3"},"txids")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string)")),(0,a.kt)("p",null,"A json array of txids to filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n    "txid"     (string) A transaction hash\n    ,...\n]\n')),(0,a.kt)("h3",{id:"blockhash"},(0,a.kt)("inlineCode",{parentName:"h3"},"blockhash")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, optional)")),(0,a.kt)("p",null,"If specified, looks for txid in the block with this hash"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli gettxoutproof '[\"mytxid\",...]'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli gettxoutproof \'["mytxid",...]\' "blockhash"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutproof", "params": [["mytxid",...], "blockhash"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'"data"           #(string) A string that is a serialized, hex-encoded data for the proof.\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help gettxoutproof\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'gettxoutproof ["txid",...] ( blockhash )\n\nReturns a hex-encoded proof that "txid" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included manually (by blockhash).\n\nArguments:\n1. "txids"       (string) A json array of txids to filter\n    [\n      "txid"     (string) A transaction hash\n      ,...\n    ]\n2. "blockhash"   (string, optional) If specified, looks for txid in the block with this hash\n\nResult:\n"data"           (string) A string that is a serialized, hex-encoded data for the proof.\n\nExamples:\n> pacprotocol-cli gettxoutproof \'["mytxid",...]\'\n> pacprotocol-cli gettxoutproof \'["mytxid",...]\' "blockhash"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "gettxoutproof", "params": [["mytxid",...], "blockhash"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);