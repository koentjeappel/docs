(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[3154],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return g}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),g=a,d=u["".concat(c,".").concat(g)]||u[g]||m[g]||s;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7948:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c},default:function(){return p}});var n=r(2122),a=r(9756),s=(r(7294),r(3905)),o={sidebar_position:105},i={unversionedId:"core/developers/pac-protocol-core/client-commands/signmessagewithprivkey",id:"core/developers/pac-protocol-core/client-commands/signmessagewithprivkey",isDocsHomePage:!1,title:"signmessagewithprivkey",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/signmessagewithprivkey.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/signmessagewithprivkey",permalink:"/docs/core/developers/pac-protocol-core/client-commands/signmessagewithprivkey",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/signmessagewithprivkey.mdx",version:"current",sidebarPosition:105,frontMatter:{sidebar_position:105},sidebar:"coreSidebar",previous:{title:"getstakingstatus",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getstakingstatus"},next:{title:"validateaddress",permalink:"/docs/core/developers/pac-protocol-core/client-commands/validateaddress"}},c=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>privkey</code> <span class='asterisk'>*</span>",id:"privkey-",children:[]},{value:"<code>message</code> <span class='asterisk'>*</span>",id:"message-",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"command"},"Command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli signmessagewithprivkey "privkey" "message"\n')),(0,s.kt)("p",null,"Sign a message with the private key of an address"),(0,s.kt)("h2",{id:"arguments"},"Arguments"),(0,s.kt)("h3",{id:"privkey-"},(0,s.kt)("inlineCode",{parentName:"h3"},"privkey")," ",(0,s.kt)("span",{class:"asterisk"},"*")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(string, required)")),(0,s.kt)("p",null,"The private key to sign the message with."),(0,s.kt)("h3",{id:"message-"},(0,s.kt)("inlineCode",{parentName:"h3"},"message")," ",(0,s.kt)("span",{class:"asterisk"},"*")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(string, required)")),(0,s.kt)("p",null,"The message to create a signature of."),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Create the signature"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli signmessagewithprivkey "privkey" "my message"\n')),(0,s.kt)("p",null,"Verify the signature"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli verifymessage "XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG" "signature" "my message"\n')),(0,s.kt)("p",null,"As json rpc"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "signmessagewithprivkey", "params": ["privkey", "my message"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,s.kt)("h2",{id:"result"},"Result"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'"signature"          #(string) The signature of the message encoded in base 64\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Running following help command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help signmessagewithprivkey\n")),(0,s.kt)("p",null,"Will produce following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'signmessagewithprivkey "privkey" "message"\n\nSign a message with the private key of an address\n\nArguments:\n1. "privkey"         (string, required) The private key to sign the message with.\n2. "message"         (string, required) The message to create a signature of.\n\nResult:\n"signature"          (string) The signature of the message encoded in base 64\n\nExamples:\n\nCreate the signature\n> pacglobal-cli signmessagewithprivkey "privkey" "my message"\n\nVerify the signature\n> pacglobal-cli verifymessage "XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwG" "signature" "my message"\n\nAs json rpc\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "signmessagewithprivkey", "params": ["privkey", "my message"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);