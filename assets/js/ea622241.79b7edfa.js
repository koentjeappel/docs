(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[2667],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6871:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),c=["components"],s={sidebar_position:72},i="getspecialtxes",l={unversionedId:"developers/pac-protocol-core/client-commands/getspecialtxes",id:"developers/pac-protocol-core/client-commands/getspecialtxes",isDocsHomePage:!1,title:"getspecialtxes",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/getspecialtxes.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/getspecialtxes",permalink:"/developers/pac-protocol-core/client-commands/getspecialtxes",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/developers/pac-protocol-core/client-commands/getspecialtxes.mdx",version:"current",sidebarPosition:72,frontMatter:{sidebar_position:72},sidebar:"coreSidebar",previous:{title:"getreceivedbyaddress",permalink:"/developers/pac-protocol-core/client-commands/getreceivedbyaddress"},next:{title:"getspentinfo",permalink:"/developers/pac-protocol-core/client-commands/getspentinfo"}},p=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>blockhash</code> <span class='asterisk'>*</span>",id:"blockhash-",children:[]},{value:"<code>type</code>",id:"type",children:[]},{value:"<code>count</code>",id:"count",children:[]},{value:"<code>skip</code>",id:"skip",children:[]},{value:"<code>verbosity</code>",id:"verbosity",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getspecialtxes"},"getspecialtxes"),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getspecialtxes "blockhash" ( type count skip verbosity ) \n')),(0,o.kt)("p",null,'getspecialtxes "blockhash" ( type count skip verbosity )\nReturns an array of special transactions found in the specified block'),(0,o.kt)("p",null,"If verbosity is 0, returns tx hash for each transaction.\nIf verbosity is 1, returns hex-encoded data for each transaction.\nIf verbosity is 2, returns an Object with information for each transaction."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"blockhash-"},(0,o.kt)("inlineCode",{parentName:"h3"},"blockhash")," ",(0,o.kt)("span",{class:"asterisk"},"*")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(string, required)")),(0,o.kt)("p",null,"The block hash"),(0,o.kt)("h3",{id:"type"},(0,o.kt)("inlineCode",{parentName:"h3"},"type")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=-1)")),(0,o.kt)("p",null,"Filter special txes by type, -1 means all types"),(0,o.kt)("h3",{id:"count"},(0,o.kt)("inlineCode",{parentName:"h3"},"count")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=10)")),(0,o.kt)("p",null,"The number of transactions to return"),(0,o.kt)("h3",{id:"skip"},(0,o.kt)("inlineCode",{parentName:"h3"},"skip")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=0)")),(0,o.kt)("p",null,"The number of transactions to skip"),(0,o.kt)("h3",{id:"verbosity"},(0,o.kt)("inlineCode",{parentName:"h3"},"verbosity")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=0)")),(0,o.kt)("p",null,"0 for hashes, 1 for hex-encoded data, and 2 for json object"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getspecialtxes "00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getspecialtxes", "params": ["00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'Result #(for verbosity = 0):\n[\n  "txid" : "xxxx",    #(string) The transaction id\n]\n\nResult #(for verbosity = 1):\n[\n  "data",               #(string) A string that is serialized, hex-encoded data for the transaction\n]\n\nResult #(for verbosity = 2):\n[                       #(array of Objects) The transactions in the format of the getrawtransaction RPC.\n  ...,\n]\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getspecialtxes\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'getspecialtxes "blockhash" ( type count skip verbosity ) \nReturns an array of special transactions found in the specified block\n\nIf verbosity is 0, returns tx hash for each transaction.\nIf verbosity is 1, returns hex-encoded data for each transaction.\nIf verbosity is 2, returns an Object with information for each transaction.\n\nArguments:\n1. "blockhash"          (string, required) The block hash\n2. type                 (numeric, optional, default=-1) Filter special txes by type, -1 means all types\n3. count                (numeric, optional, default=10) The number of transactions to return\n4. skip                 (numeric, optional, default=0) The number of transactions to skip\n5. verbosity            (numeric, optional, default=0) 0 for hashes, 1 for hex-encoded data, and 2 for json object\n\nResult (for verbosity = 0):\n[\n  "txid" : "xxxx",    (string) The transaction id\n]\n\nResult (for verbosity = 1):\n[\n  "data",               (string) A string that is serialized, hex-encoded data for the transaction\n]\n\nResult (for verbosity = 2):\n[                       (array of Objects) The transactions in the format of the getrawtransaction RPC.\n  ...,\n]\n\nExamples:\n> pacprotocol-cli getspecialtxes "00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getspecialtxes", "params": ["00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);