(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[4315],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return u}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(t),u=r,f=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return t?o.createElement(f,i(i({ref:n},m),{},{components:t})):o.createElement(f,i({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2781:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return m},default:function(){return p}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:68},c="getrawmempool",l={unversionedId:"developers/pac-protocol-core/client-commands/getrawmempool",id:"developers/pac-protocol-core/client-commands/getrawmempool",isDocsHomePage:!1,title:"getrawmempool",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/getrawmempool.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/getrawmempool",permalink:"/developers/pac-protocol-core/client-commands/getrawmempool",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/getrawmempool.mdx",version:"current",sidebarPosition:68,frontMatter:{sidebar_position:68},sidebar:"coreSidebar",previous:{title:"getrawchangeaddress",permalink:"/developers/pac-protocol-core/client-commands/getrawchangeaddress"},next:{title:"getrawtransaction",permalink:"/developers/pac-protocol-core/client-commands/getrawtransaction"}},m=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>verbose</code>",id:"verbose",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],d={toc:m};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getrawmempool"},"getrawmempool"),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getrawmempool ( verbose )\n")),(0,a.kt)("p",null,"Returns all transaction ids in memory pool as a json array of string transaction ids."),(0,a.kt)("p",null,"Hint: use getmempoolentry to fetch a specific transaction from the mempool."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"verbose"},(0,a.kt)("inlineCode",{parentName:"h3"},"verbose")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"( boolean, optional, default=false)")),(0,a.kt)("p",null,"True for a json object, false for array of transaction ids"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getrawmempool true\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getrawmempool", "params": [true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Result: #(for verbose = false):\n[                     #(json array of string)\n  "transactionid"     #(string) The transaction id\n  ,...\n]\n\nResult: #(for verbose = true):\n{                           #(json object)\n  "transactionid" : {       #(json object)\n    "size" : n,                 #(numeric) transaction size in bytes\n    "fee" : n,                  #(numeric) transaction fee in PAC #(DEPRECATED)\n    "modifiedfee" : n,          #(numeric) transaction fee with fee deltas used for mining priority #(DEPRECATED)\n    "time" : n,                 #(numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    "height" : n,               #(numeric) block height when transaction entered pool\n    "descendantcount" : n,      #(numeric) number of in-mempool descendant transactions #(including this one)\n    "descendantsize" : n,       #(numeric) size of in-mempool descendants #(including this one)\n    "descendantfees" : n,       #(numeric) modified fees #(see above) of in-mempool descendants #(including this one) #(DEPRECATED)\n    "ancestorcount" : n,        #(numeric) number of in-mempool ancestor transactions #(including this one)\n    "ancestorsize" : n,         #(numeric) size of in-mempool ancestors #(including this one)\n    "ancestorfees" : n,         #(numeric) modified fees #(see above) of in-mempool ancestors #(including this one) #(DEPRECATED)\n    "fees" : {\n        "base" : n,         #(numeric) transaction fee in PAC\n        "modified" : n,     #(numeric) transaction fee with fee deltas used for mining priority in PAC\n        "ancestor" : n,     #(numeric) modified fees #(see above) of in-mempool ancestors #(including this one) in PAC\n        "descendent" : n,   #(numeric) number of in-mempool ancestor transactions #(including this one) in PAC\n    }\n    "depends" : [               #(array) unconfirmed transactions used as inputs for this transaction\n        "transactionid",        #(string) parent transaction id\n       ... ],\n    "spentby" : [           #(array) unconfirmed transactions spending outputs from this transaction\n        "transactionid",    #(string) child transaction id\n       ... ]\n    "instantlock" : true|false  #(boolean) True if this transaction was locked via InstantSend\n  }, ...\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getrawmempool\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'getrawmempool ( verbose )\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n\nArguments:\n1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\n\nResult: (for verbose = false):\n[                     (json array of string)\n  "transactionid"     (string) The transaction id\n  ,...\n]\n\nResult: (for verbose = true):\n{                           (json object)\n  "transactionid" : {       (json object)\n    "size" : n,                 (numeric) transaction size in bytes\n    "fee" : n,                  (numeric) transaction fee in PAC (DEPRECATED)\n    "modifiedfee" : n,          (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    "time" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    "height" : n,               (numeric) block height when transaction entered pool\n    "descendantcount" : n,      (numeric) number of in-mempool descendant transactions (including this one)\n    "descendantsize" : n,       (numeric) size of in-mempool descendants (including this one)\n    "descendantfees" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    "ancestorcount" : n,        (numeric) number of in-mempool ancestor transactions (including this one)\n    "ancestorsize" : n,         (numeric) size of in-mempool ancestors (including this one)\n    "ancestorfees" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    "fees" : {\n        "base" : n,         (numeric) transaction fee in PAC\n        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in PAC\n        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in PAC\n        "descendent" : n,   (numeric) number of in-mempool ancestor transactions (including this one) in PAC\n    }\n    "depends" : [               (array) unconfirmed transactions used as inputs for this transaction\n        "transactionid",        (string) parent transaction id\n       ... ],\n    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction\n        "transactionid",    (string) child transaction id\n       ... ]\n    "instantlock" : true|false  (boolean) True if this transaction was locked via InstantSend\n  }, ...\n}\n\nExamples:\n> pacprotocol-cli getrawmempool true\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getrawmempool", "params": [true] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);