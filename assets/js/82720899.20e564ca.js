(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[2378],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(r),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||s;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<s;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3230:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var n=r(2122),a=r(9756),s=(r(7294),r(3905)),o={sidebar_position:106},i={unversionedId:"core/developers/pac-protocol-core/client-commands/validateaddress",id:"core/developers/pac-protocol-core/client-commands/validateaddress",isDocsHomePage:!1,title:"validateaddress",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/validateaddress.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/validateaddress",permalink:"/docs/core/developers/pac-protocol-core/client-commands/validateaddress",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/validateaddress.mdx",version:"current",sidebarPosition:106,frontMatter:{sidebar_position:106},sidebar:"coreSidebar",previous:{title:"signmessagewithprivkey",permalink:"/docs/core/developers/pac-protocol-core/client-commands/signmessagewithprivkey"},next:{title:"verifymessage",permalink:"/docs/core/developers/pac-protocol-core/client-commands/verifymessage"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>address</code> <span class='asterisk'>*</span>",id:"address-",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],d={toc:l};function c(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"command"},"Command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli validateaddress "address"\n')),(0,s.kt)("p",null,"Return information about the given pacglobal address."),(0,s.kt)("h2",{id:"arguments"},"Arguments"),(0,s.kt)("h3",{id:"address-"},(0,s.kt)("inlineCode",{parentName:"h3"},"address")," ",(0,s.kt)("span",{class:"asterisk"},"*")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(string, required)")),(0,s.kt)("p",null,"The pacglobal address to validate"),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli validateaddress "XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "validateaddress", "params": ["XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,s.kt)("h2",{id:"result"},"Result"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "isvalid" : true|false,       #(boolean) If the address is valid or not. If not, this is the only property returned.\n  "address" : "address", #(string) The pacglobal address validated\n  "scriptPubKey" : "hex",       #(string) The hex encoded scriptPubKey generated by the address\n  "ismine" : true|false,        #(boolean) If the address is yours or not\n  "iswatchonly" : true|false,   #(boolean) If the address is watchonly\n  "isscript" : true|false,      #(boolean) If the key is a script\n  "script" : "type"             #(string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata\n  "hex" : "hex",                #(string, optional) The redeemscript for the p2sh address\n  "addresses"                   #(string, optional) Array of addresses associated with the known redeemscript\n    [\n      "address"\n      ,...\n    ]\n  "sigsrequired" : xxxxx        #(numeric, optional) Number of signatures required to spend multisig output\n  "pubkey" : "publickeyhex",    #(string) The hex value of the raw public key\n  "iscompressed" : true|false,  #(boolean) If the address is compressed\n  "account" : "account"         #(string) DEPRECATED. The account associated with the address, "" is the default account\n  "timestamp" : timestamp,        #(number, optional) The creation time of the key if available in seconds since epoch #(Jan 1 1970 GMT)\n  "hdkeypath" : "keypath"       #(string, optional) The HD keypath if the key is HD and available\n  "hdchainid" : "&lt;hash&gt;"        #(string, optional) The ID of the HD chain\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Running following help command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help validateaddress\n")),(0,s.kt)("p",null,"Will produce following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'validateaddress "address"\n\nReturn information about the given pacglobal address.\n\nArguments:\n1. "address"     (string, required) The pacglobal address to validate\n\nResult:\n{\n  "isvalid" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\n  "address" : "address", (string) The pacglobal address validated\n  "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address\n  "ismine" : true|false,        (boolean) If the address is yours or not\n  "iswatchonly" : true|false,   (boolean) If the address is watchonly\n  "isscript" : true|false,      (boolean) If the key is a script\n  "script" : "type"             (string, optional) The output script type. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata\n  "hex" : "hex",                (string, optional) The redeemscript for the p2sh address\n  "addresses"                   (string, optional) Array of addresses associated with the known redeemscript\n    [\n      "address"\n      ,...\n    ]\n  "sigsrequired" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output\n  "pubkey" : "publickeyhex",    (string) The hex value of the raw public key\n  "iscompressed" : true|false,  (boolean) If the address is compressed\n  "account" : "account"         (string) DEPRECATED. The account associated with the address, "" is the default account\n  "timestamp" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\n  "hdkeypath" : "keypath"       (string, optional) The HD keypath if the key is HD and available\n  "hdchainid" : "<hash>"        (string, optional) The ID of the HD chain\n}\n\nExamples:\n> pacglobal-cli validateaddress "XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "validateaddress", "params": ["XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}c.isMDXComponent=!0}}]);