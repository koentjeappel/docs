(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[3406],{3905:function(e,n,o){"use strict";o.d(n,{Zo:function(){return s},kt:function(){return m}});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function d(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=t.createContext({}),i=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):d(d({},n),e)),o},s=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=i(o),m=r,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return o?t.createElement(f,d(d({ref:n},s),{},{components:o})):t.createElement(f,d({ref:n},s))}));function m(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,d=new Array(a);d[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,d[1]=c;for(var i=2;i<a;i++)d[i]=o[i];return t.createElement.apply(null,d)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},6840:function(e,n,o){"use strict";o.r(n),o.d(n,{frontMatter:function(){return d},metadata:function(){return c},toc:function(){return l},default:function(){return s}});var t=o(2122),r=o(9756),a=(o(7294),o(3905)),d={sidebar_position:79},c={unversionedId:"core/developers/pac-protocol-core/client-commands/getaddednodeinfo",id:"core/developers/pac-protocol-core/client-commands/getaddednodeinfo",isDocsHomePage:!1,title:"getaddednodeinfo",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getaddednodeinfo.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getaddednodeinfo",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getaddednodeinfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getaddednodeinfo.mdx",version:"current",sidebarPosition:79,frontMatter:{sidebar_position:79},sidebar:"coreSidebar",previous:{title:"disconnectnode",permalink:"/docs/core/developers/pac-protocol-core/client-commands/disconnectnode"},next:{title:"getconnectioncount",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getconnectioncount"}},l=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>node</code>",id:"node",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],i={toc:l};function s(e){var n=e.components,o=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,t.Z)({},i,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getaddednodeinfo ( "node" )\n')),(0,a.kt)("p",null,"Returns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)"),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"node"},(0,a.kt)("inlineCode",{parentName:"h3"},"node")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, optional)")),(0,a.kt)("p",null,"If provided, return information about this specific node, otherwise all nodes are returned."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getaddednodeinfo \n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacglobal-cli getaddednodeinfo "192.168.0.201"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getaddednodeinfo", "params": ["192.168.0.201"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'[\n  {\n    "addednode" : "192.168.0.201",   #(string) The node IP address or name #(as provided to addnode)\n    "connected" : true|false,          #(boolean) If connected\n    "addresses" : [                    #(list of objects) Only when connected = true\n       {\n         "address" : "192.168.0.201:9999",  #(string) The pacglobal server IP and port we\'re connected to\n         "connected" : "outbound"           #(string) connection, inbound or outbound\n       }\n     ]\n  }\n  ,...\n]\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getaddednodeinfo\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'getaddednodeinfo ( "node" )\n\nReturns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\n\nArguments:\n1. "node"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\n\nResult:\n[\n  {\n    "addednode" : "192.168.0.201",   (string) The node IP address or name (as provided to addnode)\n    "connected" : true|false,          (boolean) If connected\n    "addresses" : [                    (list of objects) Only when connected = true\n       {\n         "address" : "192.168.0.201:9999",  (string) The pacglobal server IP and port we\'re connected to\n         "connected" : "outbound"           (string) connection, inbound or outbound\n       }\n     ]\n  }\n  ,...\n]\n\nExamples:\n> pacglobal-cli getaddednodeinfo \n> pacglobal-cli getaddednodeinfo "192.168.0.201"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getaddednodeinfo", "params": ["192.168.0.201"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}s.isMDXComponent=!0}}]);