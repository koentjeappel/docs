(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[4779],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=l(t),u=o,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return t?r.createElement(f,c(c({ref:n},m),{},{components:t})):r.createElement(f,c({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6307:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return m},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),c=["components"],i={sidebar_position:109},s="masternode",l={unversionedId:"developers/pac-protocol-core/client-commands/masternode",id:"developers/pac-protocol-core/client-commands/masternode",isDocsHomePage:!1,title:"masternode",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/masternode.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/masternode",permalink:"/developers/pac-protocol-core/client-commands/masternode",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/developers/pac-protocol-core/client-commands/masternode.mdx",version:"current",sidebarPosition:109,frontMatter:{sidebar_position:109},sidebar:"coreSidebar",previous:{title:"logging",permalink:"/developers/pac-protocol-core/client-commands/logging"},next:{title:"masternodelist",permalink:"/developers/pac-protocol-core/client-commands/masternodelist"}},m=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>command</code> <span class='asterisk'>*</span>",id:"command-",children:[]}]}],p={toc:m};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"masternode"},"masternode"),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli masternode "command" ...\n')),(0,a.kt)("p",null,'masternode "command" ...\nSet of commands to execute masternode related actions'),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"command-"},(0,a.kt)("inlineCode",{parentName:"h3"},"command")," ",(0,a.kt)("span",{class:"asterisk"},"*")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string or set of strings, required)")),(0,a.kt)("p",null,"The command to execute"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help masternode\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'masternode "command" ...\nSet of commands to execute masternode related actions\n\nArguments:\n1. "command"        (string or set of strings, required) The command to execute\n\nAvailable commands:\n  count        - Get information about number of masternodes\n  current      - DEPRECATED Print info on current masternode winner to be paid the next block (calculated locally)\n  outputs      - Print masternode compatible outputs\n  status       - Print masternode status information\n  list         - Print list of all known masternodes (see masternodelist for more info)\n  payments     - Return information about masternode payments in a mined block\n  winner       - DEPRECATED Print info on next masternode winner to vote for\n  winners      - Print list of masternode winners\n\n')))}d.isMDXComponent=!0}}]);