(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8008],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return u}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(t),u=r,f=p["".concat(c,".").concat(u)]||p[u]||m[u]||i;return t?o.createElement(f,s(s({ref:n},d),{},{components:t})):o.createElement(f,s({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7489:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var o=t(2122),r=t(9756),i=(t(7294),t(3905)),s=["components"],a={sidebar_position:56},c="getmempooldescendants",l={unversionedId:"developers/pac-protocol-core/client-commands/getmempooldescendants",id:"developers/pac-protocol-core/client-commands/getmempooldescendants",isDocsHomePage:!1,title:"getmempooldescendants",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/getmempooldescendants.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/getmempooldescendants",permalink:"/developers/pac-protocol-core/client-commands/getmempooldescendants",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/developers/pac-protocol-core/client-commands/getmempooldescendants.mdx",version:"current",sidebarPosition:56,frontMatter:{sidebar_position:56},sidebar:"coreSidebar",previous:{title:"getmempoolancestors",permalink:"/developers/pac-protocol-core/client-commands/getmempoolancestors"},next:{title:"getmempoolentry",permalink:"/developers/pac-protocol-core/client-commands/getmempoolentry"}},d=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>txid</code> <span class='asterisk'>*</span>",id:"txid-",children:[]},{value:"<code>verbose</code>",id:"verbose",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],m={toc:d};function p(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getmempooldescendants"},"getmempooldescendants"),(0,i.kt)("h2",{id:"command"},"Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getmempooldescendants txid (verbose)\n")),(0,i.kt)("p",null,"If txid is in the mempool, returns all in-mempool descendants."),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("h3",{id:"txid-"},(0,i.kt)("inlineCode",{parentName:"h3"},"txid")," ",(0,i.kt)("span",{class:"asterisk"},"*")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(string, required)")),(0,i.kt)("p",null,"The transaction id (must be in mempool)"),(0,i.kt)("h3",{id:"verbose"},(0,i.kt)("inlineCode",{parentName:"h3"},"verbose")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(boolean, optional, default=false)")),(0,i.kt)("p",null,"True for a json object, false for array of transaction ids"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli getmempooldescendants "mytxid"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getmempooldescendants", "params": ["mytxid"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,i.kt)("h2",{id:"result"},"Result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Result #(for verbose=false):\n[                       #(json array of strings)\n  "transactionid"           #(string) The transaction id of an in-mempool descendant transaction\n  ,...\n]\n\nResult #(for verbose=true):\n{                           #(json object)\n  "transactionid" : {       #(json object)\n    "size" : n,                 #(numeric) transaction size in bytes\n    "fee" : n,                  #(numeric) transaction fee in PAC #(DEPRECATED)\n    "modifiedfee" : n,          #(numeric) transaction fee with fee deltas used for mining priority #(DEPRECATED)\n    "time" : n,                 #(numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    "height" : n,               #(numeric) block height when transaction entered pool\n    "descendantcount" : n,      #(numeric) number of in-mempool descendant transactions #(including this one)\n    "descendantsize" : n,       #(numeric) size of in-mempool descendants #(including this one)\n    "descendantfees" : n,       #(numeric) modified fees #(see above) of in-mempool descendants #(including this one) #(DEPRECATED)\n    "ancestorcount" : n,        #(numeric) number of in-mempool ancestor transactions #(including this one)\n    "ancestorsize" : n,         #(numeric) size of in-mempool ancestors #(including this one)\n    "ancestorfees" : n,         #(numeric) modified fees #(see above) of in-mempool ancestors #(including this one) #(DEPRECATED)\n    "fees" : {\n        "base" : n,         #(numeric) transaction fee in PAC\n        "modified" : n,     #(numeric) transaction fee with fee deltas used for mining priority in PAC\n        "ancestor" : n,     #(numeric) modified fees #(see above) of in-mempool ancestors #(including this one) in PAC\n        "descendent" : n,   #(numeric) number of in-mempool ancestor transactions #(including this one) in PAC\n    }\n    "depends" : [               #(array) unconfirmed transactions used as inputs for this transaction\n        "transactionid",        #(string) parent transaction id\n       ... ],\n    "spentby" : [           #(array) unconfirmed transactions spending outputs from this transaction\n        "transactionid",    #(string) child transaction id\n       ... ]\n    "instantlock" : true|false  #(boolean) True if this transaction was locked via InstantSend\n  }, ...\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Running following help command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getmempooldescendants\n")),(0,i.kt)("p",null,"Will produce following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'getmempooldescendants txid (verbose)\n\nIf txid is in the mempool, returns all in-mempool descendants.\n\nArguments:\n1. "txid"                 (string, required) The transaction id (must be in mempool)\n2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\n\nResult (for verbose=false):\n[                       (json array of strings)\n  "transactionid"           (string) The transaction id of an in-mempool descendant transaction\n  ,...\n]\n\nResult (for verbose=true):\n{                           (json object)\n  "transactionid" : {       (json object)\n    "size" : n,                 (numeric) transaction size in bytes\n    "fee" : n,                  (numeric) transaction fee in PAC (DEPRECATED)\n    "modifiedfee" : n,          (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    "time" : n,                 (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    "height" : n,               (numeric) block height when transaction entered pool\n    "descendantcount" : n,      (numeric) number of in-mempool descendant transactions (including this one)\n    "descendantsize" : n,       (numeric) size of in-mempool descendants (including this one)\n    "descendantfees" : n,       (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    "ancestorcount" : n,        (numeric) number of in-mempool ancestor transactions (including this one)\n    "ancestorsize" : n,         (numeric) size of in-mempool ancestors (including this one)\n    "ancestorfees" : n,         (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    "fees" : {\n        "base" : n,         (numeric) transaction fee in PAC\n        "modified" : n,     (numeric) transaction fee with fee deltas used for mining priority in PAC\n        "ancestor" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in PAC\n        "descendent" : n,   (numeric) number of in-mempool ancestor transactions (including this one) in PAC\n    }\n    "depends" : [               (array) unconfirmed transactions used as inputs for this transaction\n        "transactionid",        (string) parent transaction id\n       ... ],\n    "spentby" : [           (array) unconfirmed transactions spending outputs from this transaction\n        "transactionid",    (string) child transaction id\n       ... ]\n    "instantlock" : true|false  (boolean) True if this transaction was locked via InstantSend\n  }, ...\n}\n\nExamples:\n> pacprotocol-cli getmempooldescendants "mytxid"\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getmempooldescendants", "params": ["mytxid"] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);