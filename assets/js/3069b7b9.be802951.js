(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8796],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,c=function(e,n){if(null==e)return{};var t,a,c={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s=a.createContext({}),i=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,c=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(t),m=c,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(f,r(r({ref:n},u),{},{components:t})):a.createElement(f,r({ref:n},u))}));function m(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:c,r[1]=l;for(var i=2;i<o;i++)r[i]=t[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2288:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var a=t(2122),c=t(9756),o=(t(7294),t(3905)),r={sidebar_position:138},l={unversionedId:"core/developers/pac-protocol-core/client-commands/listaccounts",id:"core/developers/pac-protocol-core/client-commands/listaccounts",isDocsHomePage:!1,title:"listaccounts",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/listaccounts.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/listaccounts",permalink:"/docs/core/developers/pac-protocol-core/client-commands/listaccounts",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/listaccounts.mdx",version:"current",sidebarPosition:138,frontMatter:{sidebar_position:138},sidebar:"coreSidebar",previous:{title:"keypoolrefill",permalink:"/docs/core/developers/pac-protocol-core/client-commands/keypoolrefill"},next:{title:"listaddressbalances",permalink:"/docs/core/developers/pac-protocol-core/client-commands/listaddressbalances"}},s=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>minconf</code>",id:"minconf",children:[]},{value:"<code>addlocked</code>",id:"addlocked",children:[]},{value:"<code>include_watchonly</code>",id:"include_watchonly",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],i={toc:s};function u(e){var n=e.components,t=(0,c.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli listaccounts ( minconf addlocked include_watchonly)\n")),(0,o.kt)("p",null,"DEPRECATED. Returns Object that has account names as keys, account balances as values."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"minconf"},(0,o.kt)("inlineCode",{parentName:"h3"},"minconf")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(numeric, optional, default=1)")),(0,o.kt)("p",null,"Only include transactions with at least this many confirmations"),(0,o.kt)("h3",{id:"addlocked"},(0,o.kt)("inlineCode",{parentName:"h3"},"addlocked")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(bool, optional, default=false)")),(0,o.kt)("p",null,"Whether to include transactions locked via InstaPAC."),(0,o.kt)("h3",{id:"include_watchonly"},(0,o.kt)("inlineCode",{parentName:"h3"},"include_watchonly")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(bool, optional, default=false)")),(0,o.kt)("p",null,"Include balances in watch-only addresses (see 'importaddress')"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"List account balances where there at least 1 confirmation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli listaccounts \n")),(0,o.kt)("p",null,"List account balances including zero confirmation transactions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli listaccounts 0\n")),(0,o.kt)("p",null,"List account balances for 6 or more confirmations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli listaccounts 6\n")),(0,o.kt)("p",null,"As json rpc call"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,o.kt)("h2",{id:"result"},"Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{                    #(json object where keys are account names, and values are numeric balances\n  "account": x.xxx,  #(numeric) The property name is the account name, and the value is the total balance for the account.\n  ...\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Running following help command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help listaccounts\n")),(0,o.kt)("p",null,"Will produce following output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'listaccounts ( minconf addlocked include_watchonly)\n\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\n\nArguments:\n1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations\n2. addlocked           (bool, optional, default=false) Whether to include transactions locked via InstaPAC.\n3. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see \'importaddress\')\n\nResult:\n{                    (json object where keys are account names, and values are numeric balances\n  "account": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\n  ...\n}\n\nExamples:\n\nList account balances where there at least 1 confirmation\n> pacglobal-cli listaccounts \n\nList account balances including zero confirmation transactions\n> pacglobal-cli listaccounts 0\n\nList account balances for 6 or more confirmations\n> pacglobal-cli listaccounts 6\n\nAs json rpc call\n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [6] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);