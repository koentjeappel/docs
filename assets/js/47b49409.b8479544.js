(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[8053],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||c;return n?o.createElement(f,a(a({ref:t},s),{},{components:n})):o.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<c;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1591:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var o=n(2122),r=n(9756),c=(n(7294),n(3905)),a=["components"],i={sidebar_position:83},l={unversionedId:"pac-protocol-core/client-commands/gobject",id:"pac-protocol-core/client-commands/gobject",isDocsHomePage:!1,title:"gobject",description:"Command",source:"@site/docs/pac-protocol-core/client-commands/gobject.mdx",sourceDirName:"pac-protocol-core/client-commands",slug:"/pac-protocol-core/client-commands/gobject",permalink:"/pac-protocol-core/client-commands/gobject",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/pac-protocol-core/client-commands/gobject.mdx",version:"current",sidebarPosition:83,frontMatter:{sidebar_position:83},sidebar:"coreSidebar",previous:{title:"getzmqnotifications",permalink:"/pac-protocol-core/client-commands/getzmqnotifications"},next:{title:"help",permalink:"/pac-protocol-core/client-commands/help"}},p=[{value:"Command",id:"command",children:[]}],s={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,c.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"command"},"Command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli gobject "command" ...\n')),(0,c.kt)("p",null,'gobject "command" ...\nSet of commands to manage governance objects.'),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Running following help command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help gobject\n")),(0,c.kt)("p",null,"Will produce following output:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"gobject \"command\" ...\nSet of commands to manage governance objects.\n\nAvailable commands:\n  check              - Validate governance object data (proposal only)\n  prepare            - Prepare governance object by signing and creating tx\n  list-prepared      - Returns a list of governance objects prepared by this wallet with \"gobject prepare\"\n  submit             - Submit governance object to network\n  deserialize        - Deserialize governance object from hex string to JSON\n  count              - Count governance objects and votes (additional param: 'json' or 'all', default: 'json')\n  get                - Get governance object by hash\n  getcurrentvotes    - Get only current (tallying) votes for a governance object hash (does not include old votes)\n  list               - List governance objects (can be filtered by signal and/or object type)\n  diff               - List differences since last diff\n  vote-alias         - Vote on a governance object by masternode proTxHash\n  vote-conf          - Vote on a governance object by masternode configured in pacprotocol.conf\n  vote-many          - Vote on a governance object by all masternodes for which the voting key is in the wallet\n\n")))}m.isMDXComponent=!0}}]);