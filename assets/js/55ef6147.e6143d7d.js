(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[6805],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),l=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),m=r,h=f["".concat(a,".").concat(m)]||f[m]||p[m]||i;return n?o.createElement(h,c(c({ref:t},u),{},{components:n})):o.createElement(h,c({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=f;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9409:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return a},default:function(){return u}});var o=n(2122),r=n(9756),i=(n(7294),n(3905)),c={sidebar_position:12},s={unversionedId:"core/developers/pac-protocol-core/client-commands/getblockchaininfo",id:"core/developers/pac-protocol-core/client-commands/getblockchaininfo",isDocsHomePage:!1,title:"getblockchaininfo",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getblockchaininfo.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getblockchaininfo",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getblockchaininfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getblockchaininfo.mdx",version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"coreSidebar",previous:{title:"getblock",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getblock"},next:{title:"getblockcount",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getblockcount"}},a=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],l={toc:a};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"command"},"Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getblockchaininfo\n")),(0,i.kt)("p",null,"getblockchaininfo\nReturns an object containing various state info regarding blockchain processing."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getblockchaininfo \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,i.kt)("h2",{id:"result"},"Result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chain": "xxxx",        #(string) current network name as defined in BIP70 #(main, test, regtest)\n  "blocks": xxxxxx,         #(numeric) the current number of blocks processed in the server\n  "headers": xxxxxx,        #(numeric) the current number of headers we have validated\n  "bestblockhash": "...", #(string) the hash of the currently best block\n  "difficulty": xxxxxx,     #(numeric) the current difficulty\n  "mediantime": xxxxxx,     #(numeric) median time for the current best block\n  "verificationprogress": xxxx, #(numeric) estimate of verification progress [0..1]\n  "chainwork": "xxxx"     #(string) total amount of work in active chain, in hexadecimal\n  "pruned": xx,             #(boolean) if the blocks are subject to pruning\n  "pruneheight": xxxxxx,    #(numeric) lowest-height complete block stored\n  "softforks": [            #(array) status of softforks in progress\n     {\n        "id": "xxxx",        #(string) name of softfork\n        "version": xx,         #(numeric) block version\n        "reject": {            #(object) progress toward rejecting pre-softfork blocks\n           "status": xx,       #(boolean) true if threshold reached\n        },\n     }, ...\n  ],\n  "bip9_softforks": {          #(object) status of BIP9 softforks in progress\n     "xxxx" : {                #(string) name of the softfork\n        "status": "xxxx",    #(string) one of "defined", "started", "locked_in", "active", "failed"\n        "bit": xx,             #(numeric) the bit #(0-28) in the block version field used to signal this softfork #(only for "started" status)\n        "startTime": xx,       #(numeric) the minimum median time past of a block at which the bit gains its meaning\n        "timeout": xx,         #(numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n        "since": xx,           #(numeric) height of the first block to which the status applies\n        "statistics": {        #(object) numeric statistics about BIP9 signalling for a softfork #(only for "started" status)\n           "period": xx,       #(numeric) the length in blocks of the BIP9 signalling period \n           "threshold": xx,    #(numeric) the number of blocks with the version bit set required to activate the feature \n           "elapsed": xx,      #(numeric) the number of blocks elapsed since the beginning of the current period \n           "count": xx,        #(numeric) the number of blocks with the version bit set in the current period \n           "possible": xx      #(boolean) returns false if there are not enough blocks left in this period to pass activation threshold \n        }\n     }\n  }\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Running following help command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getblockchaininfo\n")),(0,i.kt)("p",null,"Will produce following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'getblockchaininfo\nReturns an object containing various state info regarding blockchain processing.\n\nResult:\n{\n  "chain": "xxxx",        (string) current network name as defined in BIP70 (main, test, regtest)\n  "blocks": xxxxxx,         (numeric) the current number of blocks processed in the server\n  "headers": xxxxxx,        (numeric) the current number of headers we have validated\n  "bestblockhash": "...", (string) the hash of the currently best block\n  "difficulty": xxxxxx,     (numeric) the current difficulty\n  "mediantime": xxxxxx,     (numeric) median time for the current best block\n  "verificationprogress": xxxx, (numeric) estimate of verification progress [0..1]\n  "chainwork": "xxxx"     (string) total amount of work in active chain, in hexadecimal\n  "pruned": xx,             (boolean) if the blocks are subject to pruning\n  "pruneheight": xxxxxx,    (numeric) lowest-height complete block stored\n  "softforks": [            (array) status of softforks in progress\n     {\n        "id": "xxxx",        (string) name of softfork\n        "version": xx,         (numeric) block version\n        "reject": {            (object) progress toward rejecting pre-softfork blocks\n           "status": xx,       (boolean) true if threshold reached\n        },\n     }, ...\n  ],\n  "bip9_softforks": {          (object) status of BIP9 softforks in progress\n     "xxxx" : {                (string) name of the softfork\n        "status": "xxxx",    (string) one of "defined", "started", "locked_in", "active", "failed"\n        "bit": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for "started" status)\n        "startTime": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\n        "timeout": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n        "since": xx,           (numeric) height of the first block to which the status applies\n        "statistics": {        (object) numeric statistics about BIP9 signalling for a softfork (only for "started" status)\n           "period": xx,       (numeric) the length in blocks of the BIP9 signalling period \n           "threshold": xx,    (numeric) the number of blocks with the version bit set required to activate the feature \n           "elapsed": xx,      (numeric) the number of blocks elapsed since the beginning of the current period \n           "count": xx,        (numeric) the number of blocks with the version bit set in the current period \n           "possible": xx      (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \n        }\n     }\n  }\n}\n\nExamples:\n> pacglobal-cli getblockchaininfo \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}u.isMDXComponent=!0}}]);