(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[1139],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},x=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),x=s(t),m=o,d=x["".concat(l,".").concat(m)]||x[m]||u[m]||c;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=x;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}x.displayName="MDXCreateElement"},4258:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return a},toc:function(){return l},default:function(){return p}});var r=t(2122),o=t(9756),c=(t(7294),t(3905)),i={sidebar_position:40},a={unversionedId:"core/developers/pac-protocol-core/client-commands/getinfo",id:"core/developers/pac-protocol-core/client-commands/getinfo",isDocsHomePage:!1,title:"getinfo",description:"Command",source:"@site/docs/core/developers/pac-protocol-core/client-commands/getinfo.mdx",sourceDirName:"core/developers/pac-protocol-core/client-commands",slug:"/core/developers/pac-protocol-core/client-commands/getinfo",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getinfo",editUrl:"https://github.com/pacprotocol/docs/edit/master/website/docs/core/developers/pac-protocol-core/client-commands/getinfo.mdx",version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"coreSidebar",previous:{title:"debug",permalink:"/docs/core/developers/pac-protocol-core/client-commands/debug"},next:{title:"getmemoryinfo",permalink:"/docs/core/developers/pac-protocol-core/client-commands/getmemoryinfo"}},l=[{value:"Command",id:"command",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Result",id:"result",children:[]}],s={toc:l};function p(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,c.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"command"},"Command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"pacprotocol-cli getinfo\n")),(0,c.kt)("p",null,"DEPRECATED. Returns an object containing various state info."),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"pacglobal-cli getinfo \n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n')),(0,c.kt)("h2",{id:"result"},"Result"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "deprecation-warning": "..." #(string) warning that the getinfo command is deprecated and will be removed in a future version\n  "version": xxxxx,           #(numeric) the server version\n  "protocolversion": xxxxx,   #(numeric) the protocol version\n  "walletversion": xxxxx,     #(numeric) the wallet version\n  "balance": xxxxxxx,         #(numeric) the total pacglobal balance of the wallet\n  "privatesend_balance": xxxxxx, #(numeric) the PrivateSend balance in PAC\n  "blocks": xxxxxx,           #(numeric) the current number of blocks processed in the server\n  "timeoffset": xxxxx,        #(numeric) the time offset\n  "connections": xxxxx,       #(numeric) the number of connections\n  "proxy": "host:port",       #(string, optional) the proxy used by the server\n  "difficulty": xxxxxx,       #(numeric) the current difficulty\n  "testnet": true|false,      #(boolean) if the server is using testnet or not\n  "keypoololdest": xxxxxx,    #(numeric) the timestamp #(seconds since Unix epoch) of the oldest pre-generated key in the key pool\n  "keypoolsize": xxxx,        #(numeric) how many new keys are pre-generated\n  "unlocked_until": ttt,      #(numeric) the timestamp in seconds since epoch #(midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  "paytxfee": x.xxxx,         #(numeric) the transaction fee set in PAC/kB\n  "relayfee": x.xxxx,         #(numeric) minimum relay fee for transactions in PAC/kB\n  "errors": "..."             #(string) any error messages\n}\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Running following help command"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help getinfo\n")),(0,c.kt)("p",null,"Will produce following output:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'getinfo\n\nDEPRECATED. Returns an object containing various state info.\n\nResult:\n{\n  "deprecation-warning": "..." (string) warning that the getinfo command is deprecated and will be removed in a future version\n  "version": xxxxx,           (numeric) the server version\n  "protocolversion": xxxxx,   (numeric) the protocol version\n  "walletversion": xxxxx,     (numeric) the wallet version\n  "balance": xxxxxxx,         (numeric) the total pacglobal balance of the wallet\n  "privatesend_balance": xxxxxx, (numeric) the PrivateSend balance in PAC\n  "blocks": xxxxxx,           (numeric) the current number of blocks processed in the server\n  "timeoffset": xxxxx,        (numeric) the time offset\n  "connections": xxxxx,       (numeric) the number of connections\n  "proxy": "host:port",       (string, optional) the proxy used by the server\n  "difficulty": xxxxxx,       (numeric) the current difficulty\n  "testnet": true|false,      (boolean) if the server is using testnet or not\n  "keypoololdest": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\n  "keypoolsize": xxxx,        (numeric) how many new keys are pre-generated\n  "unlocked_until": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  "paytxfee": x.xxxx,         (numeric) the transaction fee set in PAC/kB\n  "relayfee": x.xxxx,         (numeric) minimum relay fee for transactions in PAC/kB\n  "errors": "..."             (string) any error messages\n}\n\nExamples:\n> pacglobal-cli getinfo \n> curl --user myusername --data-binary \'{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }\' -H \'content-type: text/plain;\' http://127.0.0.1:1111/\n\n')))}p.isMDXComponent=!0}}]);