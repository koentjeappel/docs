(self.webpackChunkpac_protocol_docs=self.webpackChunkpac_protocol_docs||[]).push([[398],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},448:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:110},s="masternodelist",c={unversionedId:"developers/pac-protocol-core/client-commands/masternodelist",id:"developers/pac-protocol-core/client-commands/masternodelist",isDocsHomePage:!1,title:"masternodelist",description:"Command",source:"@site/docs/developers/pac-protocol-core/client-commands/masternodelist.mdx",sourceDirName:"developers/pac-protocol-core/client-commands",slug:"/developers/pac-protocol-core/client-commands/masternodelist",permalink:"/developers/pac-protocol-core/client-commands/masternodelist",editUrl:"https://github.com/pacprotocol/docs/edit/master/docs/developers/pac-protocol-core/client-commands/masternodelist.mdx",version:"current",sidebarPosition:110,frontMatter:{sidebar_position:110},sidebar:"coreSidebar",previous:{title:"masternode",permalink:"/developers/pac-protocol-core/client-commands/masternode"},next:{title:"mnsync",permalink:"/developers/pac-protocol-core/client-commands/mnsync"}},d=[{value:"Command",id:"command",children:[]},{value:"Arguments",id:"arguments",children:[{value:"<code>mode</code>",id:"mode",children:[]},{value:"<code>filter</code>",id:"filter",children:[]}]}],p={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"masternodelist"},"masternodelist"),(0,a.kt)("h2",{id:"command"},"Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'pacprotocol-cli masternodelist ( "mode" "filter" )\n')),(0,a.kt)("p",null,'masternodelist ( "mode" "filter" )\nGet a list of masternodes in different modes. This call is identical to \'masternode list\' call.'),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"mode"},(0,a.kt)("inlineCode",{parentName:"h3"},"mode")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, optional/required to use filter, defaults = json)")),(0,a.kt)("p",null,"The mode to run list in"),(0,a.kt)("h3",{id:"filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"filter")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"(string, optional)")),(0,a.kt)("p",null,"Filter results. Partial match by outpoint by default in all modes,\nadditional matches in some modes are also available"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Running following help command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pacprotocol-cli help masternodelist\n")),(0,a.kt)("p",null,"Will produce following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'masternodelist ( "mode" "filter" )\nGet a list of masternodes in different modes. This call is identical to \'masternode list\' call.\n\nArguments:\n1. "mode"      (string, optional/required to use filter, defaults = json) The mode to run list in\n2. "filter"    (string, optional) Filter results. Partial match by outpoint by default in all modes,\n                                    additional matches in some modes are also available\n\nAvailable modes:\n  addr           - Print ip address associated with a masternode (can be additionally filtered, partial match)\n  full           - Print info in format \'status payee lastpaidtime lastpaidblock IP\'\n                   (can be additionally filtered, partial match)\n  info           - Print info in format \'status payee IP\'\n                   (can be additionally filtered, partial match)\n  json           - Print info in JSON format (can be additionally filtered, partial match)\n  lastpaidblock  - Print the last block height a node was paid on the network\n  lastpaidtime   - Print the last time a node was paid on the network\n  nextpaymentblock - Print the projected block height a node will likely be paid on the network\n  owneraddress   - Print the masternode owner PAC address\n  payee          - Print the masternode payout PAC address (can be additionally filtered,\n                   partial match)\n  pubKeyOperator - Print the masternode operator public key\n  status         - Print masternode status: ENABLED / POSE_BANNED\n                   (can be additionally filtered, partial match)\n  votingaddress  - Print the masternode voting PAC address\n\n')))}m.isMDXComponent=!0}}]);